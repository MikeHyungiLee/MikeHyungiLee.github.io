<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lee Hyungi's Tech Blog</title>
    <description>Hyungi's Ideas &amp; Blogs</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 21 Apr 2020 17:23:14 +0900</pubDate>
    <lastBuildDate>Tue, 21 Apr 2020 17:23:14 +0900</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>(8) Hot reload! Stateless Stateful Widgets</title>
        <description>&lt;h3 id=&quot;flutter의-hot-reload-기능&quot;&gt;Flutter의 Hot reload 기능&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;Flutter의 Hot reload기능을 사용하기 위해서는 Stateless Stateful Widgets에 대한 이해가 필요하다.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래는 StatelessWidget의 사용의 예이다. &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;stless를 작성하면 Stateless class가 자동완성된다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter stateless widget.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(8)Hot-reload-Stateless-Stateful-widgets/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(8)Hot-reload-Stateless-Stateful-widgets/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(7) Image resources download tip</title>
        <description>&lt;h3 id=&quot;이미지-리소스를-무료로-다운받아서-사용할-수-있는-사이트&quot;&gt;이미지 리소스를 무료로 다운받아서 사용할 수 있는 사이트&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;개인적으로 앱을 만들면서 느낀 것이 앱에 알맞는 이미지 리소스를 넣는 것은 실제 앱의 사용자로 하여금 좀 더 편리하고 효율적으로 앱을 사용하게 해준다고 느꼈다.따라서 아래의 이미지 리소스를 무료로 받아서 사용할 수 있는 사이트를 적극 활용하자.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;① 이미지 리소스를 무료로 받아서 사용할 수 있는 사이트&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;icon8.com/ouch&quot;&gt;icon8.com/ouch&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;vecteezy.com&quot;&gt;vecteezy.com&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;② Customize the background or icon image&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;www.canva.com&quot;&gt;www.canva.com&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(7)Image-resource-download/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(7)Image-resource-download/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(6) Running your app on a physical device</title>
        <description>&lt;h3 id=&quot;deploying-your-flutter-apps-to-a-physical-device-&quot;&gt;Deploying Your Flutter Apps to a Physical Device &lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;실제 안드로이드 단말기에서 Flutter App을 deploy하는 방법을 살펴보자.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;우선 아래의 순서대로 실제 안드로이드 단말기에서 설정해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(1) [About] - Software Information - Build number (need to tap the menu until being developer mode.)&lt;br /&gt;
(2) Enable USB Debugging&lt;br /&gt;
(3) Connect Your Phone with USB&lt;br /&gt;
(4) Set “Trust Connected PC”&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;※ TroubleShooting Reference&lt;br /&gt;
&lt;a href=&quot;https://blog.londonappbrewery.com/troubleshooting-android-device-testing-on-windows-a2b5d779df08&quot;&gt;https://blog.londonappbrewery.com/troubleshooting-android-device-testing-on-windows-a2b5d779df08&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;실제 iOS 단말기에서 Flutter App을 deploy하는 방법을 살펴보자.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래의 Requirements를 우선준비한다.&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Requirements&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;① An Apple ID 준비하기&lt;br /&gt;
② An iPhone/iPad Device &lt;br /&gt;
③ Xcode 설치 &lt;br /&gt;
④ USB Cable &lt;br /&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Green&quot;&gt;iOS 실 단말기에 Flutter app을 deploy하기 위한 5 Steps&lt;/font&gt;&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;① &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;iOS버전이 Xcode 버전과 호환이 되는지 확인하기&lt;/font&gt;&lt;br /&gt;
iOS의 소프트웨어 버전 = 12.3이라고 가정하면, 우선 소수점 앞자리 12에서 2를 빼서(12-2) 10이라는 숫자가 된다.&lt;br /&gt;
실제 내 단말기를 확인하면, 13.3.1 버전이고 소수점 맨 앞자리 13에서 2를 빼면(13-2) 11이라는 숫자가 된다. &lt;br /&gt;
위에서 계산된 숫자는 Xcode의 최소로 요구되는 버전가 된다.&lt;strong&gt;Xcode는 최소 버전 11이어야 하고, 동시에 두번째 숫자는 Xcode버전의 두번째 숫자보다 작거나 같아야 한다.&lt;/strong&gt;&lt;br /&gt;&lt;font color=&quot;Red&quot;&gt;내가 설치한 Xcode버전은 11.3.1 / iOS버전은 13.3.1이므로 위의 두 조건을 모두 만족한다.&lt;/font&gt;&lt;br /&gt;만약에 버전이 일치하지 않는다면, Xcode의 버전을 업그레이드 하는 것이 최선이다. &lt;br /&gt;
MacOS 버전이 업데이트 되었다면, Xcode 버전도 함께 업데이트하자.&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;② homebrew를 설치한다. &lt;br /&gt;
&lt;a href=&quot;https://brew.sh/index_ja&quot;&gt;https://brew.sh/index_ja&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;/usr/bin/ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;Use home-brew to install ideviceInstaller, iOS-deploy &amp;amp; cocoa pods&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
아래 링크의 “Deploy to iOS devices”를 참조해서 설치하기&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;③ Xcode에서 “Apple ID”를 등록하기&lt;br /&gt;
&lt;strong&gt;(1) 프로젝트에서 iOS module in Xcode를 이용해서 Xcode열기&lt;/strong&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter xcode open.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;(2) Xcode에서 [Runner] - [Targets App을 선택] - [Signing &amp;amp; Capabilities 탭을 선택] - All - [Add Account]
내 Apple ID로 로그인한 뒤에 Develop Team 선택하기.&lt;/strong&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter apple id register.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter regeister apple id.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;④ 실제 iOS단말기를 USB로 연결하고, “Trust connected Computer” 선택하기&lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;만약에 앱이 단말기에 기동되지 않는다면, 신뢰된 App으로 인식이 안되서 앱이 기동이 되지 않는 것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
[General] - Device Management - Click the App  - check - Trust Profile and device management - developer app 아래에 어플 설정 들어가서 Trust클릭! - Create Unique bundle ID&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;⑤ 최종적으로 Android studio에서 Flutter를 진단해본다.&lt;br /&gt;
Android studio - [final check] - Flutter doctor&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt; (Check the setup process)&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
※ iOS에 앱을 기동시켰을때 에러가 나는 경우, 아래 troubleshooting페이지를 확인하자.&lt;br /&gt;
&lt;a href=&quot;https://blog.londonappbrewery.com/troubleshooting-ios-device-testing-for-flutter-38c5da239e62&quot;&gt;https://blog.londonappbrewery.com/troubleshooting-ios-device-testing-for-flutter-38c5da239e62&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(6)Running-your-app-on-a-physical-device/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(6)Running-your-app-on-a-physical-device/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(5)Working with Assets in Flutter &amp; the PubSpec file</title>
        <description>&lt;h2 id=&quot;flutter-app에-이미지-넣어주기-&quot;&gt;Flutter app에 이미지 넣어주기 &lt;br /&gt;&lt;/h2&gt;

&lt;p&gt;Project에 Images 폴더를 만들어서 이미지 파일을 넣어줄 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;① 프로젝트 폴더의 바로 아래에 &lt;font color=&quot;Red&quot;&gt;&quot;images&quot;&lt;/font&gt;폴더를 만들어준다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;② pubspec.yaml 파일에 새로 만든 &lt;font color=&quot;Red&quot;&gt;assets폴더의 경로를 지정&lt;/font&gt;해준다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;특정 파일만 지정을 안해주고 - image/ 디렉토리 경로만 설정해줘도 폴더 안에 모든 파일을 읽는데 문제가 되지 않는다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 pubspec yamal file.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;assets의 요소를 보면 flutter: (Parents)의 자식으로 구성되어있는 것을 확인할 수 있다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 yaml language.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;yaml 언어는 들여쓰기에 주의해서 작성을 해주어야 한다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;③ 모든 설정이 끝난다음에는 &lt;strong&gt;“Packages get”을 눌러서 프로젝트에 적용&lt;/strong&gt;시켜준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter configuration change.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter app.png&quot; width=&quot;300&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 화면에 보여지는 이미지는 해상도별로 나눠서 단말기에 넣어주지 않으면 안된다. &lt;br /&gt;
각 단말기별로 해상도가 다르므로, 화면에 이미지가 출력이 될때 해상도를 고려해서 화면에 출력을 해주어야 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;※ Icon 이미지를 해상도별로 나눠주는 웹 Generator : &lt;/font&gt;&lt;/strong&gt;&lt;a href=&quot;https://appicon.co&quot;&gt;https://appicon.co&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 image generator.png&quot; width=&quot;300&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;iPhone과 Android앱에 맞추어 App의 아이콘을 추출할 수도 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 asset folder location.png&quot; width=&quot;300&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Android / iOS는 각각 Asset folder의 위치가 다르므로 위의 위치를 고려해서 이미지를 넣어주어야 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아이콘 이미지를 import시켜주었다면 실 단말기 화면에 보여질 App의 Icon이미지를 만들어주어야 한다.&lt;br /&gt;
이전에 안드로이드 작업을 하면서 알게 된 것인데, 단말기의 기종마다 어떤 기종은 아이콘 이미지를 원으로 만들어서 출력하는 기종도 있고, 어떤 기종은 네모난 모양으로 만들어서 아이콘 이미지에 보여주는 것도 있었다. 이러한 점을 개선하기 위해서 아래의 작업을 해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;[res] - &quot;Right click&quot; - [new] - &quot;Image Assets&quot;&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 android image asset.png&quot; width=&quot;600&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter app img.png&quot; width=&quot;300&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(5)Working-with-Assets-in-Flutter-&-the-PubSpec-file/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(5)Working-with-Assets-in-Flutter-&-the-PubSpec-file/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(4) Create first Flutter App</title>
        <description>&lt;h2 id=&quot;create-flutter-app&quot;&gt;Create Flutter App&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;이제 Flutter의 개발환경 구축이 완료되었으므로, 새로 프로젝트를 생성해서 내부 구조를 살펴볼 것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번 Posting에서는 첫 Flutter App을 만들어 볼 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 모든 프로그래밍 공부의 기본이 되는 “Hello world!”를 어플에 띄어볼 것이다.&lt;br /&gt;
기존에 자동생성된 class를 삭제하고, 최 상단에 있는 void main() 메소드를 수정해보자.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter first app capture.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void main() =&amp;gt; runApp(MaterialApp(home: Center(child: Text('Hello World'))));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;), 를 붙여주는 이유는 Formatting해서 정렬을 해주기 위해서이다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To automatically format the code in the current source code window, &lt;font color=&quot;Red&quot;&gt;right-click in the code window and select Reformat Code with dartfmt.&lt;/font&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void main() =&amp;gt; runApp(
    MaterialApp(
      home: Center(
        child: Text('Hello World'),
      ),
    ),
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래와 같이 =&amp;gt; 를 {}로 묶어서 코드를 작성할 수도 있다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void main(){
  runApp(
    MaterialApp(
      home: Center(
        child: Text('Hello World'),
      ),
    ),
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;우선 첫번째로 살펴볼 Widget은 &quot;Scaffold()&quot; Widget이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter scaffold.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;※Flutter를 개발할때 사용될 Widget의 내용을 api문서에서 확인하며 개발하는 습관을 들여야 한다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://api.flutter.dev/flutter/material/Scaffold-class.html&quot;&gt;Scaffold class API - official web site &lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;두번째로 살펴볼 Widget은 &quot;AppBar()&quot; Widget이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter appbar widget.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 기존의 Center Widget을 삭제하고, 새롭게 배운 Scaffold()Widget을 넣어준다. &lt;br /&gt;
그 다음에 Scaffold()widget의 Background속성에 색을 넣어주고, 그 안에 appBar와 body Widget을 넣어준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결과 코드는 아래와 같다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void main() {
  runApp(
    MaterialApp(
      home: Scaffold(
        backgroundColor: Colors.blueGrey,
          appBar: AppBar(
            title: Center(
              child: Text(&quot;Hello World App&quot;),
            ),
          ),
          body: Center(
            child: Image(image: NetworkImage(&quot;https://stickershop.line-scdn.net/stickershop/v1/product/8729/LINEStorePC/main.png;compress=true&quot;)),
          ),
      ),
    ),
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와같이 body 위젯에 이미지를 가운데 정렬하는데 사용되는 위젯은 Center Widget이다. Widget안에 또 다른 Widget을 넣을땐, child: 속성을 넣어주고, 그 안에 새로운 위젯을 넣어주면 된다.&lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;여기서의 핵심은 Widget안에 또 다른 Widget을 넣어줄때는 child: 속성을 이용해서 넣어준다는 것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Widgets을 선택한 상태에서 Alt+Enter를 클릭하면, Widget에 적용할 수 있는 다양한 옵션들을 확인할 수 있다.&lt;br /&gt;
“Wrap with center”를 이용해서 이미지를 가운데 정렬할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter alt enter capture.png&quot; alt=&quot;blog capture&quot; width=&quot;300&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결과화면은 아래와 같다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 result screen capture(1).png&quot; alt=&quot;blog capture&quot; width=&quot;300&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;각 widget 클래스의 요소를 참조해가면서 코딩해야하므로, API문서에서 해당 클래스를 검색해서 확인할 수 있어야 한다.&lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;예를들어, 화면에 Image를 보여줘야하는 경우,&lt;/font&gt;Image class를 검색해서 참조해야한다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Widgets tree 그리기
아래의 주소를 통해서 Widgets tree를 그릴 수 있다.
&lt;a href=&quot;https://api.flutter.dev/flutter/widgets/Image-class.html&quot;&gt;https://api.flutter.dev/flutter/widgets/Image-class.html&lt;/a&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 widgets tree .png&quot; alt=&quot;blog capture&quot; width=&quot;500&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;※ Flutter의 developer mode&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
Chrome의 developer mode와 비슷하게 원반모양의 아이콘을 클릭한 후 궁금한 부분을 클릭하면 해당 부분의 요소를 트리형태로 보여준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter iOS developer mode.png&quot; alt=&quot;blog capture&quot; width=&quot;500&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter developer mode.png&quot; alt=&quot;blog capture&quot; width=&quot;500&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;※ Debug mark 없애기.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter remove debug mode.png&quot; alt=&quot;blog capture&quot; width=&quot;300&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(4)Create-first-Flutter-app/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(4)Create-first-Flutter-app/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(3)Widgets in Flutter !</title>
        <description>&lt;h2 id=&quot;anatomy-of-a-flutter-app&quot;&gt;Anatomy of a Flutter App&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;※ Flutter의 Resources 참조 GitHub&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/londonappbrewery/Flutter-Course-Resources&quot;&gt;https://github.com/londonappbrewery/Flutter-Course-Resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번 Posting에서는 Flutter App구성을 해부해볼 것이다.&lt;br /&gt;
앞서 업데이트한 포스팅에서 알 수 있듯 Flutter는 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;레고 블럭처럼 위젯을 가져다가 화면에 올려주면 된다.&quot;&lt;/font&gt;&lt;/strong&gt;컨셉으로 매우 간편하게 앱을 작성할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter widgets anatomy.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 이메지와 같은 Tree구조의 Widget들을 사용해서 앱을 만들 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter basic code structure.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이 Posting은 Udemy에서 강의를 수강하면서 정리한 내용인데, 강의를 수강하면서 공부하는 Tip에 대해서 정리해본다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Top Tips for the Course&quot;&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
각 Lesson은 10분정도의 길이로, 강의를 수강하면서 따라서 코드를 작성하지 말고, 왜 이 코드가 이렇게 작성되고 있는지 이해하면서 듣도록 한다. &lt;br /&gt;
그 후에 강의가 끝난 다음에 혼자서 배웠던 소스코드를 쳐보도록 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;강의를 듣고 나서 나중에 참조를 위해 노트정리를 해두도록 한다. &lt;br /&gt;
(Cornell Note Taking System &amp;amp; Summarize bullet points)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;만약에 강의 수강도중에 막히는 부분이 있다면, bookmark를 해두고 나중에 다시 보고 이해하도록 한다.&lt;br /&gt;
강의의 내용은 모두 중요하므로, 중간중간 빼먹는 부분이 없도록한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;새로운 Skill을 배운다는 것은, 단순 강의를 보는 것에 그치지 않고, 끊임없이 시간을 갖고 코딩을 해나가야 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Struggle is good to improve my own skill.&quot;&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(3)Widget-in-flutter/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(3)Widget-in-flutter/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(2) Setup for Flutter Development</title>
        <description>&lt;h2 id=&quot;setup-for-flutter-development&quot;&gt;Setup for Flutter Development&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;※ Flutter의 Resources 참조 GitHub&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/londonappbrewery/Flutter-Course-Resources&quot;&gt;https://github.com/londonappbrewery/Flutter-Course-Resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번 Posting에서는 Flutter 개발을 위한 환경설정을 하는 방법에 대해서 정리할 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android Studio vs Visual Studio&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나는 나에게 익숙한 “Android Studio”를 이용해서 개발을 할 것이다.&lt;br /&gt;
Android studio에서는 Android와 iOS의 Emulator view를 toggle할 수 있기 때문에 이러한 장점으로 본 IDE를 사용하는 것이 좋다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter setting sequence.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;※ 참고링크&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.udemy.com/course/flutter-bootcamp-with-dart/learn/lecture/17130752#content&quot;&gt;Check here for troubleshooting&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.udemy.com/course/flutter-bootcamp-with-dart/learn/lecture/17119664/#content&quot;&gt;Start Here For Step-by-Step Installation Videos&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://flutter.dev/docs/get-started/install/macos&quot;&gt;Flutter Installation Manual&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://thenextweb.com/dd/2019/06/04/why-does-macos-catalina-use-zsh-instead-of-bash-licensing/&quot;&gt;Why does macOS Catalina use Zsh instead of Bash? Licensing&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;현재 나는 Mac을 사용하고 있으므로, Mac을 기준으로 Flutter 개발환경을 구축해볼 것이다.&lt;br /&gt;
자세한 설치내용은 상단의 &lt;strong&gt;“Flutter Installation Manual”&lt;/strong&gt;의 내용을 참조한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;① 우선 flutter 환경설정을 하기전에 shell을 zsh로 바꿔줘야한다. &lt;/strong&gt;&lt;br /&gt;
  그러기 위해서는 아래와 같이 .zshrc　파일을 작성하고 그 내부에 flutter의 환경설정파일(bin)폴더의 경로를 작성해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter zshrc file.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;※ flutter 환경설정이 잘되었는지 진단할때 유용한 &lt;font color=&quot;Red&quot;&gt;&quot;flutter doctor&quot;&lt;/font&gt;명령어가 있다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter doctor.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;최종적으로 Flutter의 개발환경 구축이 완료된 후에 &lt;strong&gt;flutter –version&lt;/strong&gt;으로 terminal상에서 확인을 해보면, 아래와 같이 설치 버전을 확인할 수 있는데, 이렇게 나온다면 환경구축이 성공한 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter version check.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;※ 참고링크&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;② 그 다음으로 사용하게 될 Android Studio에 &lt;strong&gt;Flutter plugin을 설치&lt;/strong&gt;해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;[Android studio] - [Preferences] - [Plugin] - &quot;Flutter&quot;검색하고 설치 &lt;br /&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter plugin.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;이제 Flutter의 개발환경 구축이 완료되었으므로, 새로 프로젝트를 생성해서 내부 구조를 살펴볼 것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(2)Setup-for-Flutter-Development/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(2)Setup-for-Flutter-Development/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(1) What is Flutter ?</title>
        <description>&lt;h2 id=&quot;flutter&quot;&gt;Flutter&lt;/h2&gt;

&lt;p&gt;이번 Posting에서는 여지까지 공부했던 “Flutter”에 대해서 내용정리를 하면서 복습해 볼 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;우선 Flutter의 특징에 대해서 알아보자.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;① Flutter는 다양한 비율과 해상도에 맞게 레이아웃을 만들 수 있다. &lt;/strong&gt;&lt;br /&gt;
   개발자가 레이아웃을 만들때, screen과 device의 제약을 두지 않고 만들 수 있다는 의미이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;→ 이것이 가능한 이유는 Flutter는&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Based on simple blank window&quot;&lt;/font&gt;&lt;/strong&gt;로 모든 단말기에 단순 빈 윈도우 화면을 요청하고 그 위에 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;그림을 그리듯 위젯을 그린다.&lt;/font&gt;&lt;/strong&gt; &lt;br /&gt;
   이처럼 Flutter는 빈 화면위에 간단하게 모든 widget을 그리기때문에 Layout을 작성함에 있어 매우 강력하다.(Paint function)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter screen image.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;② 두번째 Flutter의 강력한 기능은 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;레고처럼 Piece by piece&quot;로 위젯들을 연결시켜 어플을 만들 수 있다는 것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter widget capture.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;③ 세번째로 왜 Flutter여야 하는가? 인데 이것은 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;One codebase to rule them all&quot;&lt;/font&gt;&lt;/strong&gt;에 그 의미가 있다. 하나의 코드 작성으로 &lt;font color=&quot;Red&quot;&gt;모바일(Android, iOS), Web 어플리케이션, Desktop 어플리케이션&lt;/font&gt;을 모두 작성할 수 있기 때문이다.&lt;br /&gt;
이러한 Web design concept이 flutter에 도입이 되었다.&lt;br /&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter huge advantage.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;④ &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;Flutter는 &quot;Hot Reload&quot; 기능을 지원한다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
  기존의 App개발에서는 Running and Compiling을 해야지만 app의 레이아웃의 변경사항을 확인할 수 있었지만, Flutter는 레이아웃의 변경사항이 레이아웃상에 바로 보여진다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;⑤ iOS에서는 세부 클래스의 정보들이 숨겨져있지만, &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;안드로이드처럼 Flutter는 상속되어있는 클래스와 메소드의 관계를 모두 공개하고 있다.&lt;br /&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(1)flutter/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(1)flutter/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>Java MVVM Part7 ~ 9</title>
        <description>&lt;p&gt;&lt;strong&gt;#7 Android MVVM Architecture Tutorial - Handling API Exceptions&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt;:&lt;a href=&quot;https://www.youtube.com/watch?v=67bdklHmXA8&amp;amp;list=PLk7v1Z2rk4hjVaZ8DZKe8iT9RIM9OUrwp&amp;amp;index=1&quot;&gt;https://www.youtube.com/watch?v=67bdklHmXA8&amp;amp;list=PLk7v1Z2rk4hjVaZ8DZKe8iT9RIM9OUrwp&amp;amp;index=1&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;API 송수신 에러를 처리를 구현해 볼 것이다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;※ 노트정리 (Part7)&lt;br /&gt;
&lt;img src=&quot;/images/android/2020-04-20/2020-04-20 Handling API Exceptions.png&quot; alt=&quot;blog capture&quot; width=&quot;500&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ViewModel클래스에서 호출해서 사용할 UserRepository의 메소드를 살펴보자. 이 메소드는 기존에 Response 객체를 반환하고, 이 반환된 객체를 ViewModel에서 일일이 송수신 성공여부(로그인 성공/실패)에 따라서 이벤트 처리를 해주었다. &lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;하지만 이런식으로 반복해서 ViewModel 클래스에서 매번 조건처리해서 적어주면 코드의 가독성이 떨어지기 때문에, 이러한 처리를 공통화 처리해주기로 한다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 공통화 처리해서 작성해줄 부분이 network 패키지 아래에 작성한 SafeApiRequest 추상클래스이고, 여기에서 작성한 메소드는 송수신 성공시에는 ResponseBody를 반환해주고, 실패하면, 에러 메시지를 덫붙여서 ApiException 클래스에 던져준다. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ApiException(message: String) : IOException(message) {

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 IOException클래스를 상속하고, String타입의 message 변수를 인자로 갖는 ApiException클래스를 작성해서 활용한다. 이 ApiException 클래스는 IOException의 기능을 계승한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이렇게 작성을 하게 되면, 최종적으로 AuthViewModel 클래스에서 Repository클래스 내부에서 작성한 메소드로 값을 반환할때, &lt;font color=&quot;Red&quot;&gt;try{}catch{}내에서 커스터마이징한 ApiException클래스로 송수신 성공/실패를 에러로써 Catch해서 처리할 수 있게 된다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 부분은 연습이 필요할 것 같다.&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/20/Android-Kotlin-MVVM-Part7-9/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/20/Android-Kotlin-MVVM-Part7-9/</guid>
        
        
        <category>Android-Architecture</category>
        
      </item>
    
      <item>
        <title>Java MVVM Part4 ~ 6</title>
        <description>&lt;p&gt;&lt;strong&gt;#4 Android MVVM Architecture Tutorial - User Login using Retrofit&lt;br /&gt;&lt;/strong&gt;
&lt;strong&gt;#5 Android MVVM Architecture Tutorial - Room Database Setup&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt;:&lt;a href=&quot;https://www.youtube.com/watch?v=67bdklHmXA8&amp;amp;list=PLk7v1Z2rk4hjVaZ8DZKe8iT9RIM9OUrwp&amp;amp;index=1&quot;&gt;https://www.youtube.com/watch?v=67bdklHmXA8&amp;amp;list=PLk7v1Z2rk4hjVaZ8DZKe8iT9RIM9OUrwp&amp;amp;index=1&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;Retrofit API에 대해서 더 자세하게 알고 싶다면, &lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Retrofit Android Tutorial - What is REST API ?&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=30GSz20AHV4&amp;amp;t=10&quot;&gt;https://www.youtube.com/watch?v=30GSz20AHV4&amp;amp;t=10&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Retrofit Android Tutorial - Sign Up using Retrofit POST&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=xtCmFEaQENc&amp;amp;t=3&quot;&gt;https://www.youtube.com/watch?v=xtCmFEaQENc&amp;amp;t=3&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Android Room Tutorial - Building a Basic Notes App&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=9iF2qEF28Do&amp;amp;list=PLk7v1Z2rk4hg_ywZffPgRTmJoy2XWs02d&quot;&gt;https://www.youtube.com/watch?v=9iF2qEF28Do&amp;amp;list=PLk7v1Z2rk4hg_ywZffPgRTmJoy2XWs02d&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;※ 노트정리 (Part4 ~ 5)&lt;br /&gt;
&lt;img src=&quot;/images/android/2020-04-19/2020-04-19 Room database note.png&quot; alt=&quot;blog capture&quot; width=&quot;500&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번 Part4, 5에서는 작성했던 AuthViewModel클래스와 Repository클래스를 연결하는 작업을 해볼 것이다.&lt;br /&gt;
폴더 구조는 위에 첨부한 노트필기에서와 같이 data패키지가 있고, 그 아래에 있는 network 패키지(remote data source)와 db 패키지(model - Room database)로 구성되어 있다. &lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;Api interface 작성하기&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;우선 data 패키지 아래에 network 패키지를 작성하고, MyApi 인터페이스를 작성해준다.&lt;br /&gt;
이 인터페이스 내부에서는 remote server에서의 email과 password를 User에 의해 입력받은 email과 password과 비교해서 로그인이 성공했는지 실패했는지 확인할 수 있는 userLogin() 메소드가 있다. &lt;br /&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;위에서 작성한 Api 인터페이스를 UserRepository 클래스에 구현해준다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;클래스 내부에 userLogin() 메소드를 작성해주고, 이 메소드는  LiveData&lt;String&gt;를 반환해준다.&lt;br /&gt;
반환되는 LiveData&lt;String&gt; 값은 MyApi 인터페이스에서 작성해준 userLogin메소드의 callback 함수로부터 반환된 값을 기준으로 한다.&lt;br /&gt;&lt;/String&gt;&lt;/String&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;※ Room database setup&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
다음으로 구성해줄 부분은 &lt;strong&gt;“model”&lt;/strong&gt;부분으로, 기존의 data클래스 아래에 &lt;strong&gt;db&lt;/strong&gt; 패키지를 작성해주고, 그 아래에 필요한 코드를 구성해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;db패키지의 아래에는&lt;/strong&gt; &lt;br /&gt;
① Room database를 초기화 시켜주고, Dao의 getter abstract 메소드가 위치한다. - (C)AppDatabase&lt;br /&gt;
② Room database로부터 데이터를 insert, select하는 @Dao interface를 작성한다. - (I)UserDao&lt;br /&gt;
③ db 클래스 내부에 entities 패키지를 작성해주고, 보내줄 데이터의 entity클래스를 작성한다. - (data C)User&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;#6 Android MVVM Architecture Tutorial - Using Coroutines&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
이번에는 위에서 구성한 Room database setting을 통해서 내부 DB에 로그인한 User의 token정보를 저장해볼 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;User의 token정보를 저장하기에 앞서, 우선 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Simplify Retrofit calls using coroutine&quot; Retrofit의 callback function의 작성을 Kotlin의 Coroutine을 활용해서 간단하게 작성해볼것이다..&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【code refactoring (UserRepository.kt)】&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;기존 코드(Retrofit callback function)&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // 아래와 같이 해주기 보다는 Repository 에서 Api instance 를 초기화 시켜주고 사용하는 것이 좋다.
  // 이 부분은 차후에 수정해보기
  MyApi().userLogin(email, password)
      .enqueue(object: Callback&amp;lt;ResponseBody&amp;gt;{
          override fun onFailure(call: Call&amp;lt;ResponseBody&amp;gt;, t: Throwable) {
              loginResponse.value = t.message
          }

          override fun onResponse(
              call: Call&amp;lt;ResponseBody&amp;gt;,
              response: Response&amp;lt;ResponseBody&amp;gt;
          ) {
              if(response.isSuccessful){
                  loginResponse.value = response.body()?.string()
              }else{
                  loginResponse.value = response.errorBody()?.string()
              }
          }
      })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;수정된 코드(Kotlin coroutine)&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Api 메소드를 suspend fun 메소드로 수정한 뒤에 Repository method
suspend fun userLogin(email: String, password: String) : Response&amp;lt;AuthResponse&amp;gt;{
    return MyApi().userLogin(email, password)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;【code refactoring (AuthViewModel.kt)】&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;기존 코드(AuthViewModel.kt)&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
기존에 Retrofit call함수로 코드를 작성했을때는 아래와 같이 작성해주었다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val loginResponse = UserRepository().userLogin(email!!, password!!)
authListener?.onSuccess(loginResponse)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만, suspend fun로 메소드를 작성해주면 호출해서 사용하는 곳이 suspend 메소드이거나 Coroutine scope 내부에서 호출해주어야 한다. 따라서 아래와 같이 코드를 작성해주었다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;수정된 코드(AuthViewModel.kt)&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// util &amp;gt; Coroutines 에 작성해 준 main() 메소드를 사용해서 실행해준다.
Coroutines.main {
   val response = UserRepository().userLogin(email!!, password!!)
   if(response.isSuccessful){
       authListener?.onSuccess(response.body()?.user!!)
   }else{
       authListener?.onFailure(&quot;Error code: ${response.code()}&quot;)
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기존에 LoginActivity에서 loginResponse의 변화를 observe하는 처리를 해주었는데, ViewModel 클래스에서 CoroutineScope의 main thread에서 처리를 해주었기 때문에, 별도로 Activity에는 Observe처리를 해주지 않아도 된다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;코드를 작성해줄때, 공통적으로 사용되는 메소드는 잘 정리해서 공통화처리해주어야 한다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//util/Coroutines.kt (Object class)

object Coroutines{
  //parameter : coroutine function (suspend function)
  fun main(work: suspend (()-&amp;gt;Unit)) =
      CoroutineScope(Dispatchers.Main).launch{
          work()
      }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 19 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/19/Android-Kotlin-MVVM-Part4-6/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/19/Android-Kotlin-MVVM-Part4-6/</guid>
        
        
        <category>Android-Architecture</category>
        
      </item>
    
  </channel>
</rss>
