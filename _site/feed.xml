<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lee Hyungi's Tech Blog</title>
    <description>Hyungi's Ideas &amp; Blogs</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 23 Apr 2020 04:35:55 +0900</pubDate>
    <lastBuildDate>Thu, 23 Apr 2020 04:35:55 +0900</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>(9) How to build beautiful UIs with Flutter Widgets</title>
        <description>&lt;h3 id=&quot;flutter의-widgets을-활용해서-ui를-작성해보자&quot;&gt;Flutter의 Widgets을 활용해서 UI를 작성해보자.&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;MiCard (간단히 나의 소개를 하는 앱 프로젝트)를 만들어보면서 Flutter 앱 개발에 필요한 요소들을 공부해 나갈 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이건 팁인데 GitHub 검색창에 Flutter를 검색해서 다른 사람의 소스코드들을 볼 수 있으니, 시간이 될때 다른 사람의 소스코드를 많이 보도록 하자.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;본격적으로 프로젝트를 시작하기 전에 &lt;font color=&quot;Red&quot;&gt;Hot Reload and Hot Restart&lt;/font&gt;에 대해서 배워 볼 것이다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;Flutter의 Hot reload기능을 사용하기 위해서는 Stateless Stateful Widgets에 대한 이해가 필요하다.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래는 StatelessWidget의 사용의 예이다. &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;stless를 작성하면 Stateless class가 자동완성된다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter stateless widget.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 기능을 이용하면 Flutter는 즉시 코드상의 변화를 Emulator에 반영한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이 Hot Reload 기능을 사용하기 위해서는 우리는 &lt;font color=&quot;Red&quot;&gt;&quot;StatelessWidget&quot;&lt;/font&gt;을 상속받는 클래스를 작성해서 이를 main() function에 넣어주어야 한다.&lt;/strong&gt;&lt;br /&gt;
Stateless Widget 클래스를 상속하면 build method를 내부에 구현하게 되는데, 이 메소드는 앱의 코드 속성이 바뀔때마다 자동으로 화면을 갱신시켜준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 hot reload.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;마치 화면에 바로 붓으로 페인팅을 해주는 듯이 앱을 만들어준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;우리는 개발을 할때 코드를 치고(Write code) &amp;lt;—&amp;gt; 코드를 테스트하는(Test code) 반복하는 작업을 한다. Flutter는 이 cycle의 시간을 단축시켜준다. &lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우리가 native Android/iOS 앱을 개발을 할때 Cold한 상태로 앱을 실행한다. Emulator를 실행하는데 시간이 오래걸린다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flutter에서의 또 다른 장점 중에 하나는 &lt;font color=&quot;Blue&quot;&gt;현재 화면중에 표시되어있는 데이터가 있다면, 이 데이터의 상태는 유지한 상태에서 디자인의 변경만 화면에 적용&lt;/font&gt;시킬 수 있다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;만약에 화면에 있는 데이터를 초기화 시킴과 동시에 화면의 디자인을 변경하고 싶다면, &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Hot reload(번개표시)&quot;옆에 있는 Hot restart(초록색 원형 화살표 표시)를 클릭하면 된다. Hot restart로 emulator를 다시 시작하는 것보다 훨씬 빠른 속도로 화면에 반영되는 것을 확인할 수 있다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter hot restart.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하나의 재미있는 컨셉으로 이 개념을 이해해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter example.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위에 케리어 백이 하나 있다. 여행을 갈때 매일과 같이 싸야되는 물건과 목적지에 따라서 추가적으로 챙겨야 되는 물건이 있다고 가정하자. 이런 경우에는 공통적으로 싸야되는 물건은 고정적으로 준비를 해두고 추가적으로 준비해야되는 물건은 따로 준비해서 챙기면 매우 편리하게 짐을 준비할 수 있다. 이를 Flutter의 개념에 비추어 이해해보면, 이미 적재되어 있는 코드는 계속 현상유지를 하고 추가된 새로운 요소만 기존의 요소에 업데이트 해주는 처리만 해주면 매우 편리하고 빠르게 코드처리를 처리할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사이즈는 전혀 문제가 되지 않는다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이번 시간에는 &lt;font color=&quot;Blue&quot;&gt;Container() Widget&lt;/font&gt;에 대해서 배워볼 것이다. 이 Container() Widget은 웹의 Div태그와 같은 기능을 해준다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter container widget.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter div tag.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;새로운 위젯을 사용해서 개발을 할때는 항상 Flutter 공식 홈페이지의 API문서를 참조해서 만들어야 한다.&lt;br /&gt;
&lt;strong&gt;이번에 배울 Container위젯은 Layout과 관련된 항목이므로, 아래 Flutter widget categories페이지에서 layout 항목을 선택한다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt; Flutter widget categories
&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
→ &lt;a href=&quot;https://flutter.dev/docs/development/ui/widgets&quot;&gt;https://flutter.dev/docs/development/ui/widgets&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt; Flutter container widget
&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
→ &lt;a href=&quot;https://api.flutter.dev/flutter/widgets/Container-class.html&quot;&gt;https://api.flutter.dev/flutter/widgets/Container-class.html&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;API의 설명을 보면 &lt;strong&gt;“Containers with no children try to be as big as possible”&lt;/strong&gt;내용을 확인할 수 있다. &lt;br /&gt;
여기에서 알 수 있듯이 Container widget에 자식 widget/container가 없다면, 컨테이너의 크기는 가능한한 커지려고 하는 속성을 가지고 있는 것을 알 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 속성을 확인하기 위해서 Scaffold 위젯에 배경색을 넣고, body에 Container 위젯을 넣어 색상 속성을 지정해주자. 그러면 body에 넣은 Container색상으로 배경색이 모두 바뀌는 것을 알 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;만약에 Container 내부에 child:Text(‘chlie’)를 넣어주면 그 작은 텍스트만 감싸는 Container를 확인할 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;만약에 Container를 Parent와 맞춰서 늘리고 싶다면, double.infinity 값을 height와 width의 속성에 넣어주면 된다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;Container의 배경색을 바꾸기 위해서는 &lt;font color=&quot;Red&quot;&gt;decoration&lt;/font&gt;과 &lt;font color=&quot;Red&quot;&gt;foregroundDecoration&lt;/font&gt;을 사용해서 바꿀 수 있다. &lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 두 가지 속성을 바꿔서 Container의 모양을 완전히 바꿀 수 있다. 두 속성의 간단한 차이점을 말하자면, &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Decoration&quot;&lt;/font&gt;속성은 항상 child의 뒤(Behind)에 위치한고 반면에 &lt;font color=&quot;Red&quot;&gt;foregroundDecoration&lt;/font&gt;은 child의 위(Top)에 위치한다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;Container내의 배경색상 바꾸기&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Way1 : use color with Color class &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;child: Container(
  //Set background for container.
  color: Colors.redAccent
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Way2 : use decoration with BoxDecoration&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return new Container(
  // This widget is the root of the application.
  decoration: new BoxDecoration(color: Colors.red),
  child: new Center(
    child: new Text(&quot;Hello, World!&quot;),
  ),
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Way3 : use foregroundDecoration with BoxDecoration&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return Scaffold(
    appBar: AppBar(title: Text('Container.foregroundDecoration')),
    body: Container(
      height: double.infinity,
      width: double.infinity,
      decoration: BoxDecoration(color: Colors.yellowAccent),
      foregroundDecoration: BoxDecoration(
        color: Colors.red.withOpacity(0.5),
      ),
      child: Text(&quot;Hi&quot;),
   ),
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 Text child를 가지고 있는 container의 위치를 확인해보면 최상단에 글자가 잘린 상태로 출력됨을 알 수 있다. 이로 인해 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Safe Area&quot;&lt;/font&gt;&lt;/strong&gt;를 설정해주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Container 위젯에서 Alt+Enter키를 누르고 “wrap with widget”을 선택하면 Container 위젯을 감싸는 widget을 지정할 수 있다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 SafeArea widget.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Container 속성 (1)
height: 100.0,
width: 100.0,
margin: EdgeInsets.all(20.0),

//Container 속성 (2)
height: 100.0,
width: 100.0,
margin: EdgeInsets.symmetric(vertical: 50, horizontal: 100),

//Container 속성 (3)
height: 100.0,
width: 100.0,
margin: EdgeInsets.fromLTRB(30.0, 10.0, 50.0, 20.0),

//Container 속성 (4)
height: 100.0,
width: 100.0,
margin: EdgeInsets.only(left: 30.0),

//margin은 outside of widget의 간격을 조절할때 사용하고,
//padding은 inside of widget의 간격을 조절할때 사용된다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Flutter Inspector의 Debug Paint버튼을 이용하여 Container 위젯이 화면에서 어떻게 구성이 되어있는지 가시적으로 확인할 수 있다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter debug paint.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;※ 만약에 Text 위젯 이외에 하나의 위젯을 더 넣으려고 한다면, 에러가 난다. 그 이유는 Container는 “Single-child layout widgets” 중에 하나이기 때문이다. &lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(9)How-to-build-beautiful-UIs-with-Flutter-Widgets/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(9)How-to-build-beautiful-UIs-with-Flutter-Widgets/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(8) Hot reload! Stateless Stateful Widgets</title>
        <description>&lt;h3 id=&quot;flutter의-hot-reload-기능&quot;&gt;Flutter의 Hot reload 기능&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;Flutter의 Hot reload기능을 사용하기 위해서는 Stateless Stateful Widgets에 대한 이해가 필요하다.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래는 StatelessWidget의 사용의 예이다. &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;stless를 작성하면 Stateless class가 자동완성된다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter stateless widget.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(8)Hot-reload-Stateless-Stateful-widgets/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(8)Hot-reload-Stateless-Stateful-widgets/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(7) Image resources download tip</title>
        <description>&lt;h3 id=&quot;이미지-리소스를-무료로-다운받아서-사용할-수-있는-사이트&quot;&gt;이미지 리소스를 무료로 다운받아서 사용할 수 있는 사이트&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;개인적으로 앱을 만들면서 느낀 것이 앱에 알맞는 이미지 리소스를 넣는 것은 실제 앱의 사용자로 하여금 좀 더 편리하고 효율적으로 앱을 사용하게 해준다고 느꼈다.따라서 아래의 이미지 리소스를 무료로 받아서 사용할 수 있는 사이트를 적극 활용하자.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;① 이미지 리소스를 무료로 받아서 사용할 수 있는 사이트&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;icon8.com/ouch&quot;&gt;icon8.com/ouch&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;vecteezy.com&quot;&gt;vecteezy.com&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;② Customize the background or icon image&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;www.canva.com&quot;&gt;www.canva.com&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(7)Image-resource-download/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(7)Image-resource-download/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(6) Running your app on a physical device</title>
        <description>&lt;h3 id=&quot;deploying-your-flutter-apps-to-a-physical-device-&quot;&gt;Deploying Your Flutter Apps to a Physical Device &lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;실제 안드로이드 단말기에서 Flutter App을 deploy하는 방법을 살펴보자.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;우선 아래의 순서대로 실제 안드로이드 단말기에서 설정해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(1) [About] - Software Information - Build number (need to tap the menu until being developer mode.)&lt;br /&gt;
(2) Enable USB Debugging&lt;br /&gt;
(3) Connect Your Phone with USB&lt;br /&gt;
(4) Set “Trust Connected PC”&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;※ TroubleShooting Reference&lt;br /&gt;
&lt;a href=&quot;https://blog.londonappbrewery.com/troubleshooting-android-device-testing-on-windows-a2b5d779df08&quot;&gt;https://blog.londonappbrewery.com/troubleshooting-android-device-testing-on-windows-a2b5d779df08&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;실제 iOS 단말기에서 Flutter App을 deploy하는 방법을 살펴보자.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래의 Requirements를 우선준비한다.&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Requirements&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;① An Apple ID 준비하기&lt;br /&gt;
② An iPhone/iPad Device &lt;br /&gt;
③ Xcode 설치 &lt;br /&gt;
④ USB Cable &lt;br /&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Green&quot;&gt;iOS 실 단말기에 Flutter app을 deploy하기 위한 5 Steps&lt;/font&gt;&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;① &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;iOS버전이 Xcode 버전과 호환이 되는지 확인하기&lt;/font&gt;&lt;br /&gt;
iOS의 소프트웨어 버전 = 12.3이라고 가정하면, 우선 소수점 앞자리 12에서 2를 빼서(12-2) 10이라는 숫자가 된다.&lt;br /&gt;
실제 내 단말기를 확인하면, 13.3.1 버전이고 소수점 맨 앞자리 13에서 2를 빼면(13-2) 11이라는 숫자가 된다. &lt;br /&gt;
위에서 계산된 숫자는 Xcode의 최소로 요구되는 버전가 된다.&lt;strong&gt;Xcode는 최소 버전 11이어야 하고, 동시에 두번째 숫자는 Xcode버전의 두번째 숫자보다 작거나 같아야 한다.&lt;/strong&gt;&lt;br /&gt;&lt;font color=&quot;Red&quot;&gt;내가 설치한 Xcode버전은 11.3.1 / iOS버전은 13.3.1이므로 위의 두 조건을 모두 만족한다.&lt;/font&gt;&lt;br /&gt;만약에 버전이 일치하지 않는다면, Xcode의 버전을 업그레이드 하는 것이 최선이다. &lt;br /&gt;
MacOS 버전이 업데이트 되었다면, Xcode 버전도 함께 업데이트하자.&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;② homebrew를 설치한다. &lt;br /&gt;
&lt;a href=&quot;https://brew.sh/index_ja&quot;&gt;https://brew.sh/index_ja&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;/usr/bin/ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;Use home-brew to install ideviceInstaller, iOS-deploy &amp;amp; cocoa pods&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
아래 링크의 “Deploy to iOS devices”를 참조해서 설치하기&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;③ Xcode에서 “Apple ID”를 등록하기&lt;br /&gt;
&lt;strong&gt;(1) 프로젝트에서 iOS module in Xcode를 이용해서 Xcode열기&lt;/strong&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter xcode open.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;(2) Xcode에서 [Runner] - [Targets App을 선택] - [Signing &amp;amp; Capabilities 탭을 선택] - All - [Add Account]
내 Apple ID로 로그인한 뒤에 Develop Team 선택하기.&lt;/strong&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter apple id register.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter regeister apple id.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;④ 실제 iOS단말기를 USB로 연결하고, “Trust connected Computer” 선택하기&lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;만약에 앱이 단말기에 기동되지 않는다면, 신뢰된 App으로 인식이 안되서 앱이 기동이 되지 않는 것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
[General] - Device Management - Click the App  - check - Trust Profile and device management - developer app 아래에 어플 설정 들어가서 Trust클릭! - Create Unique bundle ID&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;⑤ 최종적으로 Android studio에서 Flutter를 진단해본다.&lt;br /&gt;
Android studio - [final check] - Flutter doctor&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt; (Check the setup process)&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
※ iOS에 앱을 기동시켰을때 에러가 나는 경우, 아래 troubleshooting페이지를 확인하자.&lt;br /&gt;
&lt;a href=&quot;https://blog.londonappbrewery.com/troubleshooting-ios-device-testing-for-flutter-38c5da239e62&quot;&gt;https://blog.londonappbrewery.com/troubleshooting-ios-device-testing-for-flutter-38c5da239e62&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(6)Running-your-app-on-a-physical-device/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(6)Running-your-app-on-a-physical-device/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(5)Working with Assets in Flutter &amp; the PubSpec file</title>
        <description>&lt;h2 id=&quot;flutter-app에-이미지-넣어주기-&quot;&gt;Flutter app에 이미지 넣어주기 &lt;br /&gt;&lt;/h2&gt;

&lt;p&gt;Project에 Images 폴더를 만들어서 이미지 파일을 넣어줄 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;① 프로젝트 폴더의 바로 아래에 &lt;font color=&quot;Red&quot;&gt;&quot;images&quot;&lt;/font&gt;폴더를 만들어준다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;② pubspec.yaml 파일에 새로 만든 &lt;font color=&quot;Red&quot;&gt;assets폴더의 경로를 지정&lt;/font&gt;해준다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;특정 파일만 지정을 안해주고 - image/ 디렉토리 경로만 설정해줘도 폴더 안에 모든 파일을 읽는데 문제가 되지 않는다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 pubspec yamal file.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;assets의 요소를 보면 flutter: (Parents)의 자식으로 구성되어있는 것을 확인할 수 있다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 yaml language.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;yaml 언어는 들여쓰기에 주의해서 작성을 해주어야 한다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;③ 모든 설정이 끝난다음에는 &lt;strong&gt;“Packages get”을 눌러서 프로젝트에 적용&lt;/strong&gt;시켜준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter configuration change.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter app.png&quot; width=&quot;300&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 화면에 보여지는 이미지는 해상도별로 나눠서 단말기에 넣어주지 않으면 안된다. &lt;br /&gt;
각 단말기별로 해상도가 다르므로, 화면에 이미지가 출력이 될때 해상도를 고려해서 화면에 출력을 해주어야 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;※ Icon 이미지를 해상도별로 나눠주는 웹 Generator : &lt;/font&gt;&lt;/strong&gt;&lt;a href=&quot;https://appicon.co&quot;&gt;https://appicon.co&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 image generator.png&quot; width=&quot;300&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;iPhone과 Android앱에 맞추어 App의 아이콘을 추출할 수도 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 asset folder location.png&quot; width=&quot;300&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Android / iOS는 각각 Asset folder의 위치가 다르므로 위의 위치를 고려해서 이미지를 넣어주어야 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아이콘 이미지를 import시켜주었다면 실 단말기 화면에 보여질 App의 Icon이미지를 만들어주어야 한다.&lt;br /&gt;
이전에 안드로이드 작업을 하면서 알게 된 것인데, 단말기의 기종마다 어떤 기종은 아이콘 이미지를 원으로 만들어서 출력하는 기종도 있고, 어떤 기종은 네모난 모양으로 만들어서 아이콘 이미지에 보여주는 것도 있었다. 이러한 점을 개선하기 위해서 아래의 작업을 해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;[res] - &quot;Right click&quot; - [new] - &quot;Image Assets&quot;&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 android image asset.png&quot; width=&quot;600&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter app img.png&quot; width=&quot;300&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(5)Working-with-Assets-in-Flutter-&-the-PubSpec-file/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(5)Working-with-Assets-in-Flutter-&-the-PubSpec-file/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(4) Create first Flutter App</title>
        <description>&lt;h2 id=&quot;create-flutter-app&quot;&gt;Create Flutter App&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;이제 Flutter의 개발환경 구축이 완료되었으므로, 새로 프로젝트를 생성해서 내부 구조를 살펴볼 것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번 Posting에서는 첫 Flutter App을 만들어 볼 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 모든 프로그래밍 공부의 기본이 되는 “Hello world!”를 어플에 띄어볼 것이다.&lt;br /&gt;
기존에 자동생성된 class를 삭제하고, 최 상단에 있는 void main() 메소드를 수정해보자.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter first app capture.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void main() =&amp;gt; runApp(MaterialApp(home: Center(child: Text('Hello World'))));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;), 를 붙여주는 이유는 Formatting해서 정렬을 해주기 위해서이다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To automatically format the code in the current source code window, &lt;font color=&quot;Red&quot;&gt;right-click in the code window and select Reformat Code with dartfmt.&lt;/font&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void main() =&amp;gt; runApp(
    MaterialApp(
      home: Center(
        child: Text('Hello World'),
      ),
    ),
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래와 같이 =&amp;gt; 를 {}로 묶어서 코드를 작성할 수도 있다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void main(){
  runApp(
    MaterialApp(
      home: Center(
        child: Text('Hello World'),
      ),
    ),
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;우선 첫번째로 살펴볼 Widget은 &quot;Scaffold()&quot; Widget이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter scaffold.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;※Flutter를 개발할때 사용될 Widget의 내용을 api문서에서 확인하며 개발하는 습관을 들여야 한다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://api.flutter.dev/flutter/material/Scaffold-class.html&quot;&gt;Scaffold class API - official web site &lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;두번째로 살펴볼 Widget은 &quot;AppBar()&quot; Widget이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter appbar widget.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 기존의 Center Widget을 삭제하고, 새롭게 배운 Scaffold()Widget을 넣어준다. &lt;br /&gt;
그 다음에 Scaffold()widget의 Background속성에 색을 넣어주고, 그 안에 appBar와 body Widget을 넣어준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결과 코드는 아래와 같다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void main() {
  runApp(
    MaterialApp(
      home: Scaffold(
        backgroundColor: Colors.blueGrey,
          appBar: AppBar(
            title: Center(
              child: Text(&quot;Hello World App&quot;),
            ),
          ),
          body: Center(
            child: Image(image: NetworkImage(&quot;https://stickershop.line-scdn.net/stickershop/v1/product/8729/LINEStorePC/main.png;compress=true&quot;)),
          ),
      ),
    ),
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와같이 body 위젯에 이미지를 가운데 정렬하는데 사용되는 위젯은 Center Widget이다. Widget안에 또 다른 Widget을 넣을땐, child: 속성을 넣어주고, 그 안에 새로운 위젯을 넣어주면 된다.&lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;여기서의 핵심은 Widget안에 또 다른 Widget을 넣어줄때는 child: 속성을 이용해서 넣어준다는 것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Widgets을 선택한 상태에서 Alt+Enter를 클릭하면, Widget에 적용할 수 있는 다양한 옵션들을 확인할 수 있다.&lt;br /&gt;
“Wrap with center”를 이용해서 이미지를 가운데 정렬할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter alt enter capture.png&quot; alt=&quot;blog capture&quot; width=&quot;300&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결과화면은 아래와 같다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 result screen capture(1).png&quot; alt=&quot;blog capture&quot; width=&quot;300&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;각 widget 클래스의 요소를 참조해가면서 코딩해야하므로, API문서에서 해당 클래스를 검색해서 확인할 수 있어야 한다.&lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;예를들어, 화면에 Image를 보여줘야하는 경우,&lt;/font&gt;Image class를 검색해서 참조해야한다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Widgets tree 그리기
아래의 주소를 통해서 Widgets tree를 그릴 수 있다.
&lt;a href=&quot;https://www.draw.io/&quot;&gt;https://www.draw.io/&lt;/a&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 widgets tree .png&quot; alt=&quot;blog capture&quot; width=&quot;500&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;※ Flutter의 developer mode&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
Chrome의 developer mode와 비슷하게 원반모양의 아이콘을 클릭한 후 궁금한 부분을 클릭하면 해당 부분의 요소를 트리형태로 보여준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter iOS developer mode.png&quot; alt=&quot;blog capture&quot; width=&quot;500&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter developer mode.png&quot; alt=&quot;blog capture&quot; width=&quot;500&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;※ Debug mark 없애기.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter remove debug mode.png&quot; alt=&quot;blog capture&quot; width=&quot;300&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(4)Create-first-Flutter-app/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(4)Create-first-Flutter-app/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(3) Widgets in Flutter !</title>
        <description>&lt;h2 id=&quot;anatomy-of-a-flutter-app&quot;&gt;Anatomy of a Flutter App&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;※ Flutter의 Resources 참조 GitHub&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/londonappbrewery/Flutter-Course-Resources&quot;&gt;https://github.com/londonappbrewery/Flutter-Course-Resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번 Posting에서는 Flutter App구성을 해부해볼 것이다.&lt;br /&gt;
앞서 업데이트한 포스팅에서 알 수 있듯 Flutter는 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;레고 블럭처럼 위젯을 가져다가 화면에 올려주면 된다.&quot;&lt;/font&gt;&lt;/strong&gt;컨셉으로 매우 간편하게 앱을 작성할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter widgets anatomy.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 이메지와 같은 Tree구조의 Widget들을 사용해서 앱을 만들 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter basic code structure.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이 Posting은 Udemy에서 강의를 수강하면서 정리한 내용인데, 강의를 수강하면서 공부하는 Tip에 대해서 정리해본다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Top Tips for the Course&quot;&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
각 Lesson은 10분정도의 길이로, 강의를 수강하면서 따라서 코드를 작성하지 말고, 왜 이 코드가 이렇게 작성되고 있는지 이해하면서 듣도록 한다. &lt;br /&gt;
그 후에 강의가 끝난 다음에 혼자서 배웠던 소스코드를 쳐보도록 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;강의를 듣고 나서 나중에 참조를 위해 노트정리를 해두도록 한다. &lt;br /&gt;
(Cornell Note Taking System &amp;amp; Summarize bullet points)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;만약에 강의 수강도중에 막히는 부분이 있다면, bookmark를 해두고 나중에 다시 보고 이해하도록 한다.&lt;br /&gt;
강의의 내용은 모두 중요하므로, 중간중간 빼먹는 부분이 없도록한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;새로운 Skill을 배운다는 것은, 단순 강의를 보는 것에 그치지 않고, 끊임없이 시간을 갖고 코딩을 해나가야 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Struggle is good to improve my own skill.&quot;&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(3)Widget-in-flutter/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(3)Widget-in-flutter/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(2) Setup for Flutter Development</title>
        <description>&lt;h2 id=&quot;setup-for-flutter-development&quot;&gt;Setup for Flutter Development&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;※ Flutter의 Resources 참조 GitHub&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/londonappbrewery/Flutter-Course-Resources&quot;&gt;https://github.com/londonappbrewery/Flutter-Course-Resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이번 Posting에서는 Flutter 개발을 위한 환경설정을 하는 방법에 대해서 정리할 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android Studio vs Visual Studio&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나는 나에게 익숙한 “Android Studio”를 이용해서 개발을 할 것이다.&lt;br /&gt;
Android studio에서는 Android와 iOS의 Emulator view를 toggle할 수 있기 때문에 이러한 장점으로 본 IDE를 사용하는 것이 좋다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter setting sequence.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;※ 참고링크&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.udemy.com/course/flutter-bootcamp-with-dart/learn/lecture/17130752#content&quot;&gt;Check here for troubleshooting&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.udemy.com/course/flutter-bootcamp-with-dart/learn/lecture/17119664/#content&quot;&gt;Start Here For Step-by-Step Installation Videos&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://flutter.dev/docs/get-started/install/macos&quot;&gt;Flutter Installation Manual&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://thenextweb.com/dd/2019/06/04/why-does-macos-catalina-use-zsh-instead-of-bash-licensing/&quot;&gt;Why does macOS Catalina use Zsh instead of Bash? Licensing&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;현재 나는 Mac을 사용하고 있으므로, Mac을 기준으로 Flutter 개발환경을 구축해볼 것이다.&lt;br /&gt;
자세한 설치내용은 상단의 &lt;strong&gt;“Flutter Installation Manual”&lt;/strong&gt;의 내용을 참조한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;① 우선 flutter 환경설정을 하기전에 shell을 zsh로 바꿔줘야한다. &lt;/strong&gt;&lt;br /&gt;
  그러기 위해서는 아래와 같이 .zshrc　파일을 작성하고 그 내부에 flutter의 환경설정파일(bin)폴더의 경로를 작성해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter zshrc file.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;※ flutter 환경설정이 잘되었는지 진단할때 유용한 &lt;font color=&quot;Red&quot;&gt;&quot;flutter doctor&quot;&lt;/font&gt;명령어가 있다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter doctor.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;최종적으로 Flutter의 개발환경 구축이 완료된 후에 &lt;strong&gt;flutter –version&lt;/strong&gt;으로 terminal상에서 확인을 해보면, 아래와 같이 설치 버전을 확인할 수 있는데, 이렇게 나온다면 환경구축이 성공한 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter version check.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;※ 참고링크&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;② 그 다음으로 사용하게 될 Android Studio에 &lt;strong&gt;Flutter plugin을 설치&lt;/strong&gt;해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;[Android studio] - [Preferences] - [Plugin] - &quot;Flutter&quot;검색하고 설치 &lt;br /&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter plugin.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;이제 Flutter의 개발환경 구축이 완료되었으므로, 새로 프로젝트를 생성해서 내부 구조를 살펴볼 것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(2)Setup-for-Flutter-Development/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(2)Setup-for-Flutter-Development/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(13) Flutter MiCard App</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;※ 이번 포스팅에서는 간단한 Flutter 앱을 만들어가면서 개발시에 필요한 각종 팁에 대해서 배우고, 중요한 내용들을 정리해 볼 것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 이번에 만든 최종 앱의 모습은 다음과 같다.&lt;br /&gt;
간단하게 Flutter로 레이아웃을 만들어 보았다. 단순한 앱이지만 레이아웃을 작성해나가면서 각 Widget을 어떻게 구성해야되는지, 여러 개념에 대해서 배울 수 있었다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;빨간색으로 작성한 속성은 나중에 유용하게 사용될 수 있다고 생각이 되서, Syntax에 익숙해지기 위해서 적어두었다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※ Quick dogs의 사용 : &lt;font color=&quot;Red&quot;&gt;Mac에서는 Ctrl + j 단축키를&lt;/font&gt;누르면 각 위젯에서 설정할 수 있는 속성리스트를 확인할 수 있다.&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;Material Design에서의 Pallet와 Icons의 사용에 대해서 익숙해지자. Google에서 제공되는 유용한 디자인 도구이므로, 잘 활용할 수 있도록 연습을 하자.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://material.io/&quot;&gt;https://material.io/&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이번 Flutter 앱을 만들어보면서 Container에 padding과 margin속성을 주는 작업을 하였는데, &lt;font color=&quot;Red&quot;&gt;EdgeInsets.all, EdgeInsets.symmetric 등 EdgeInsets를 이용해서 padding과  margin값을 지정할 수 있다는 것을 배웠다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;img src=&quot;/images/flutter/2020-04-23/2020-04-23 flutter micard app capture.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;300&quot; /&gt; &lt;br /&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;img src=&quot;/images/flutter/2020-04-23/2020-04-23 micard widget tree diagram.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;1000&quot; /&gt; &lt;br /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        backgroundColor: Colors.teal,
        body: SafeArea(
          child: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: &amp;lt;Widget&amp;gt;[
                CircleAvatar(
                  radius: 50.0,
                  backgroundColor: Colors.red,
                  backgroundImage: AssetImage('images/profile picture.jpg'),
                ),
                Text(
                  'Lee Hyungi',
                  style: TextStyle(
                    fontFamily: 'Pacifico',
                    fontSize: 40.0,
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  'Flutter Developer',
                  style: TextStyle(
                    fontFamily: 'Source Sans Pro',
                    color: Colors.teal.shade100,
                    fontSize: 20.0,
                    letterSpacing: 2.5,
                    fontWeight: FontWeight.bold
                  ),
                ),
                Container(
                  padding: EdgeInsets.all(10.0),
                  color: Colors.white,
                  margin: EdgeInsets.symmetric(vertical: 10.0, horizontal: 25.0),
                  child: Row(
                    children: &amp;lt;Widget&amp;gt;[
                      Icon(
                          Icons.phone,
                          color: Colors.teal,
                      ),
                      SizedBox(
                        width: 10.0,
                      ),
                      Text(
                        '+81 80 4443 5931',
                        style: TextStyle(
                          color:Colors.teal.shade900,
                          fontFamily: 'Source Sans Pro',
                          fontSize: 20.0,
                        ),
                      ),
                    ],
                  )
                ),
                Container(
                  padding: EdgeInsets.all(10.0),
                  margin: EdgeInsets.symmetric(vertical: 10.0, horizontal: 25.0),
                  color: Colors.white,
                  child: Row(
                    children: &amp;lt;Widget&amp;gt;[
                      Icon(
                        Icons.email,
                        color: Colors.teal,
                      ),
                      SizedBox(
                        width: 10.0,
                      ),
                      Text(
                        'mike.hyungi.lee@gmail.com',
                        style: TextStyle(
                          color: Colors.teal.shade900,
                          fontSize: 20.0,
                          fontFamily: 'Source Sans Pro',
                        ),
                      )
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(13)Flutter-Simple-App/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(13)Flutter-Simple-App/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(12) Flutter Custom Fonts</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;※ 이번 포스팅에서는 Flutter 앱에 Custom Fonts를 import하는 방법에 대해서 알아 볼 것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;우선 Google에서 제공하는 Custom fonts 다운로드 사이트는 아래와 같다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;fonts.google.com&quot;&gt;fonts.google.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위에 사이트에서 *.ttf 확장자의 파일을 다운받는다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다운받은 font들은 프로젝트 최상위 위치에 ‘fonts’폴더를 만들어서 복사붙여넣기 해준다.&lt;br /&gt;
그 후에는 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;pubspec.yaml&quot;&lt;/font&gt;&lt;/strong&gt; 안에 아래의 fonts폴더의 위치를 잡아준다.(이 과정은 이전에 배웠던 images 폴더를 추가하고 프로젝트에 적용시켰던 작업과 동일하다)&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fonts:
   - family: Pacifico
     fonts:
       - asset: fonts/Pacifico-Regular.ttf

   - family: Source Sans Pro
     fonts:
       - asset: fonts/SourceSansPro-Regular.ttf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(12)Flutter-Custom-Fonts/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(12)Flutter-Custom-Fonts/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
  </channel>
</rss>
