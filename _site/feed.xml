<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lee Hyungi's Tech Blog</title>
    <description>Hyungi's Ideas &amp; Blogs</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 24 Apr 2020 21:47:08 +0900</pubDate>
    <lastBuildDate>Fri, 24 Apr 2020 21:47:08 +0900</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>Java MVVM Part7 ~ 9</title>
        <description>&lt;p&gt;&lt;strong&gt;#7 Android MVVM Architecture Tutorial - Handling API Exceptions&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt;:&lt;a href=&quot;https://www.youtube.com/watch?v=67bdklHmXA8&amp;amp;list=PLk7v1Z2rk4hjVaZ8DZKe8iT9RIM9OUrwp&amp;amp;index=1&quot;&gt;https://www.youtube.com/watch?v=67bdklHmXA8&amp;amp;list=PLk7v1Z2rk4hjVaZ8DZKe8iT9RIM9OUrwp&amp;amp;index=1&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;API 송수신 에러를 처리를 구현해 볼 것이다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※ 노트정리 (Part7)&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/images/android/2020-04-20/2020-04-20 Handling API Exceptions.png&quot; alt=&quot;blog capture&quot; width=&quot;700&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ViewModel클래스에서 호출해서 사용할 UserRepository의 메소드를 살펴보자. 이 메소드는 기존에 Response 객체를 반환하고, 이 반환된 객체를 ViewModel에서 일일이 송수신 성공여부(로그인 성공/실패)에 따라서 이벤트 처리를 해주었다. &lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;하지만 이런식으로 반복해서 ViewModel 클래스에서 매번 조건처리해서 적어주면 코드의 가독성이 떨어지기 때문에, 이러한 처리를 공통화 처리해주기로 한다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 공통화 처리해서 작성해줄 부분이 network 패키지 아래에 작성한 SafeApiRequest 추상클래스이고, 여기에서 작성한 메소드는 송수신 성공시에는 ResponseBody를 반환해주고, 실패하면, 에러 메시지를 덫붙여서 ApiException 클래스에 던져준다. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ApiException(message: String) : IOException(message) {

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 IOException클래스를 상속하고, String타입의 message 변수를 인자로 갖는 ApiException클래스를 작성해서 활용한다. 이 ApiException 클래스는 IOException의 기능을 계승한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이렇게 작성을 하게 되면, 최종적으로 AuthViewModel 클래스에서 Repository클래스 내부에서 작성한 메소드로 값을 반환할때, &lt;font color=&quot;Red&quot;&gt;try{}catch{}내에서 커스터마이징한 ApiException클래스로 송수신 성공/실패를 에러로써 Catch해서 처리할 수 있게 된다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 부분은 연습이 필요할 것 같다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Green&quot;&gt;(2020/04/24 업데이트 내용)&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#8 Android MVVM Architecture Tutorial - User Login&lt;br /&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 Login한 User정보를 내부 DB(SQLite)에 저장을 할 것이다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;LoginActivity &amp;lt;———-&amp;gt; DB(SQLite) &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 처리과정 사이에는 LoginActivity —&amp;gt; AuthViewModel —&amp;gt; UserRepository —&amp;gt; SQLite 순서로 값이 전달된다. 이런 형태로 데이터를 처리하면 나중에 Unit test를 할때 편할 것 같다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;구체적인 내용은 아래에 직접 노트필기한 부분을 캡쳐해서 사진으로 첨부했다. 이것을 참조하면서 이번시간에 공부한 내용을 정리하도록 하자.&lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;집중해서 봐야할 내용은 Activity클래스에서 viewModel객체를 초기화 시킬때 Repository를 인수로 받아서 초기화 시켜주는 부분이다.&lt;/font&gt;&lt;br /&gt;
 이 부분이 중요한 이유는 Activity클래스에서 db에 접근하기 위해서는 Repository 클래스를 갖고 있는 ViewModel객체가 필요한데, 우리가 기존에 작성한 ViewModel 객체를 보면 초기화 시켜주었을 당시에 ViewModelProviders를 사용해서 초기화를 시켜주었는데, 여기서 인자값으로 Context만 넘겨주었다. 따라서 ViewModelProviders의 다른 생성자를 확인해보면 Context와 ViewModelFactory 두 개의 인자로 객체화를 시켜주는 생성자도 있는데, 이를 위해 AuthViewModelFactory 클래스를 작성해서 함께 초기화 시켜주면 Repository정보도 갖고 있는 ViewModel 객체를 만들어서 접근할 수 있다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※ 노트정리 (Part8)&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/images/android/2020-04-24/2020-04-24 kotlin save user info into sqlite.png&quot; alt=&quot;blog capture&quot; width=&quot;700&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#9 Android MVVM Architecture Tutorial - Dependency Injection&lt;br /&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 인터넷 연결을 검사해서 인터넷이 연결되어 있지 않은 경우, 에러를 처리하도록 할 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※ 노트정리 (Part9)&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;내용 설명 : 이제 에러처리하는 것은 모두 IOException 클래스를 상속받고 message를 인자로 받는 Customized 클래스를 사용해서 에러가 발생하는 경우에는 Customized된 클래스로 에러를 throw하는 처리를 할 것이다.&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;①우선 이번 시간에는 Network가 연결되었는지 아닌지를 검사를 하기 위해서 해당 처리부분을  NetworkConnectionInterceptor 클래스 내에 작성을 하였다. 이 클래스에는 인터넷이 연결되어있는지 체크하는 method와 그 method를 사용해서 에러처리한 뒤 에러가 발생하는 조건의 경우 앞서 IOException을 상속한 NoInternetException 클래스에 에러를 throw하도록 처리를 하였다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;②다음에는 작성한 NetworkConnectionInterceptor 요소를 OkHttpClient에 intercepter로써 추가해주는 작업을 하고 이 추가된 OkHttpClient 객체를 Retrofit.Builder의 client로써 추가시켜주었다.&lt;br /&gt;&lt;/p&gt;
&lt;font color=&quot;Red&quot;&gt;(이 MyApi 인터페이스 내에는 context로 초기화를 시켜줄 수 없으므로, context를 생성자로 갖고 있는 NetworkConnectionInterceptor클래스 객체를 자체로 넘겨주어 처리한다./MyApi 인터페이스의 invoke operator fun의 인자로 NetworkConnectionInterceptor 타입의 인자를 넘겨준다)&lt;/font&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;③이제 ViewModel 클래스의  main 쓰레드 처리에서 예외처리를 받는 부분에 e:NoInternetException 처리를 추가해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/android/2020-04-24/2020-04-24 kotlin internet connection exception.png&quot; alt=&quot;blog capture&quot; width=&quot;700&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/24/Android-Kotlin-MVVM-Part10-12/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/24/Android-Kotlin-MVVM-Part10-12/</guid>
        
        
        <category>Android-Architecture</category>
        
      </item>
    
      <item>
        <title>(17)Dart Language</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;※ 이번 포스팅에서는 Dart언어의 특징에 대해서 알아본다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Dart언어는 &lt;strong&gt;Statically Typed Language&lt;/strong&gt;이다. 물론 dynamic 키워드를 이용해서 다이나믹하게 변수를 사용할 수 있지만, “avoid using dynamic data type이 dart 언어 사용에 있어 권고되는 사항이다. 예기치 못한 에러의 발생을 예방하기 위해서 변수를 사용할때에는 확실한 data type을 지정해서 사용하는 것이 좋다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;String변수의 값을 초기화 할때는 일반 다른 언어와 달리 Dart에서는 ‘‘(single quotation)로 이용해 String값을 assign해준다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-23/2020-04-23 flutter widget tree.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;700&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/22/(17)Dart-Language/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/22/(17)Dart-Language/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(16)Flutter Dice App - Expanded widget &amp; Stateful / StatelessWidget</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;※ 레이아웃을 작성하다보면 화면상의 widget이 화면 밖으로 위치하는 경우가 생긴다.(overflow) &lt;br /&gt;
이런 경우를 예방하기 위해 우리는 Expanded 위젯을 사용해서 레이아웃을 작성하는 것이 좋다. Expanded 위젯은 자동으로 Layout에 맞춰 화면상의 각 구성요소를 출력해주기 때문에 overflow가 발생하지 않는다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래 Widget tree구조를 보면 알 수 있듯이 Row 위젯의 children 요소로써 Expanded 위젯을 두 개 배치하였고, 각각의 Expanded에 FlatButton 위젯을 넣어 버튼 처리를 해주었다. 이렇게 두 개 이상의 Expanded요소를 넣고 flex 속성을 넣어주면 각 요소를 비율에 맞추어 화면에 배치할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;※ 위젯을 다른 위젯의 하위에 위치시키거나 삭제 및 수정을 할때에는 &lt;font color=&quot;Red&quot;&gt;&quot;Intention Action&quot;&lt;/font&gt;을 이용하면 widgets을 embeded하는 것이 편리하다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;방법1)&lt;/font&gt;&lt;/strong&gt; 위젯을 선택하고, 안드로이드 IDE우측에 위치한 [Flutter outline] 탭을 선택, 소스코드에서 각 위젯요소를 선택시 outline의 navigator 리스트에서 해당 위젯이 선택됨을 확인할 수 있다. 이 navigator 리스트에서 우측 클릭을 해서 해당 위젯을 조작할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;방법2)&lt;/font&gt;&lt;/strong&gt; 더 많은 Widget 조작을 하기 위해서는 소스코드상에서 위젯을 클릭하면 좌측에 light bulb(Intention Action) 마크가 나오는데,(Alt+Enter) 화살표를 클릭해서 다양한 Widget 조작 옵션을 활용할 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;※ Flutter 버튼을 활용하여 Gesture Detection을 추가해보자. &lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;자 새로운 위젯을 사용할때에는 Widget category에서 해당 카테고리를 확인해가며 사용하도록 하자. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Button Widget - FlatButton Widget Api&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://api.flutter.dev/flutter/material/FlatButton-class.html&quot;&gt;https://api.flutter.dev/flutter/material/FlatButton-class.html&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음 Api문서를 확인해보면 알 수 있듯이 FlatButton 위젯에서는 onPressed 속성과 Text 속성을 지정할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FlatButton(
  // Anonymous function
  onPressed: () {
    /*...*/
  },
  child: Text(
    &quot;Flat Button&quot;,
  ),
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;※ 다음으로 알아볼 것은 Stateless Widget과 Stateful Widget의 사용이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th width=&quot;500&quot;&gt;
      &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;Stateless Widget&lt;/font&gt;&lt;/strong&gt;
    &lt;/th&gt;
    &lt;th width=&quot;500&quot;&gt;
      &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;Stateful Widget&lt;/font&gt;&lt;/strong&gt;
    &lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;strong&gt;if you are creating a user interface where the state of the widget isn't going to be changed.&lt;/strong&gt;&lt;br /&gt;

      다음 설명에서와 같이 User과의  interaction에 의해 변하지 않는 화면(레이아웃)의 경우에는 Stateless Widget을 사용한다.
    &lt;/td&gt;
    &lt;td&gt;
      &lt;strong&gt;if you are creating something which is going to be changed especially when it's dependent on user interaction.&lt;/strong&gt;&lt;br /&gt;

      다음 설명에서와 같이 User과의  interaction에 의해 상태가 변하는 화면(레이아웃)의 경우에는 Stateful Widget을 사용한다.
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;※ StatefulWidget을 상속하는 클래스 작성하기&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
“stful”을 입력하면 자동으로 StatefulWidget을 상속하는 클래스와 State&lt;T&gt;상속하는 클래스가 자동생성된다. State&lt;T&gt;를 상속하는 클래스는 mutable 클래스로, 기존에 StatelessWidget상속 클래스에 작성했던 내용을 여기에 적어주면 된다.&lt;br /&gt;&lt;/T&gt;&lt;/T&gt;&lt;/p&gt;

&lt;p&gt;State&lt;T&gt; 상속 클래스에서 User의 행동으로 trigger되는 event처리하는 부분(ex. 버튼클릭)에서&lt;/T&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setState((){

});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;위의 setState를 작성해줘서 클릭이벤트가 발생했을때, build 메소드 내에 있는 코드가 다시 Re-build될 수 있도록 처리해준다. &lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;※ Dart에서 Math 라이브러리 사용하기&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
이번 주사위 돌리는 앱에서는 클릭할때마다 난수가 발생하여, 주사위에 표시되는 숫자가 랜덤으로 표시된다.&lt;br /&gt;
사용법은 &lt;strong&gt;import ‘dart:math’;&lt;/strong&gt; 라이브러리를 import하고, 코드상에서&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Random().nextInt(6)+1 // 1~6까지의 난수 발생
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://dartpad.dartlang.org&quot;&gt;https://dartpad.dartlang.org&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;Ref. &quot;Dicd App Widget Tree&quot;&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;img src=&quot;/images/flutter/2020-04-23/2020-04-23 flutter dice app.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;300&quot; /&gt; &lt;br /&gt;
    &lt;/td&gt;  
    &lt;td&gt;
      &lt;img src=&quot;/images/flutter/2020-04-23/2020-04-23 flutter dice app widget tree.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;600&quot; /&gt; &lt;br /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void main() {
  return runApp(
    MaterialApp(
      home: Scaffold(
        backgroundColor: Colors.red,
        appBar: AppBar(
          title: Text('Dicee'),
          backgroundColor: Colors.red,
        ),
        body: DicePage(),
      ),
    ),
  );
}

class DicePage extends StatefulWidget {
  @override
  _DicePageState createState() =&amp;gt; _DicePageState();
}

class _DicePageState extends State&amp;lt;DicePage&amp;gt; {
  int leftDiceNumber = 1;
  int rightDiceNumber = 1;

  void setupRandomDiceNumber(){
    setState(() {
      rightDiceNumber = Random().nextInt(6) + 1;
      leftDiceNumber = Random().nextInt(6) + 1;
    });
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Center(
        child: Row(
          children: &amp;lt;Widget&amp;gt;[
            Expanded(
              child: FlatButton(
                child: Image.asset('images/dice$leftDiceNumber.png'),
                onPressed: () {
                  // build again, re-build, re-draw
                  setupRandomDiceNumber();
                },
              ),
            ),
            Expanded(
              child: FlatButton(
                child: Image.asset('images/dice$rightDiceNumber.png'),
                onPressed: () {
                  // build again, re-build, re-draw
                  setupRandomDiceNumber();
                },),
            ),
          ],
        ),
      ),
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 22 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/22/(16)-Flutter-Dice-App-Expanded-Widget/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/22/(16)-Flutter-Dice-App-Expanded-Widget/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(15)Building Apps with State.</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;※ 이번 포스팅에서는 기존에 작성했던 코드를 Customized Widgets을 활용하여 간단하게 refactoring해볼것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사용할 Customized widget은 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Card widget&quot;과 &quot;ListTile&quot; Widget&lt;/font&gt;&lt;/strong&gt;이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일전에 MiCard App을 만들었을때, 전화와 이메일 정보를 담는 네모난 카드형태의 모양을 Container 위젯을 사용해서 구현해보았다. 하지만 앞에 아이콘이 위치하고 뒤에 그 아이콘의 타이틀이 위치하는 형태는 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;이미 Card 위젯으로 Customize되어있다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
자 그럼 두 가지 소스코드를 비교해보자.&lt;/p&gt;

&lt;p&gt;다음 코드에서 볼 수 있듯이 Customize된 Widget을 활용하면 더욱 간단하게 소스코드를 작성할 수 있다. &lt;br /&gt;
이전에 사용했던 &lt;strong&gt;CircleAvatar 위젯&lt;/strong&gt;도 Customize Widget 중에 하나이다. 다음 소스 코드에서 Container 위젯을 Card위젯으로 바꾸었을때 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;가장 큰 변화는 padding 속성을 주는 부분&lt;/font&gt;&lt;/strong&gt;이다.&lt;br /&gt;
기존의 Container에서 padding을 주었을때에는 간단히 padding속성에 EdgeInsets.all(10.0) 속성을 주어 padding을 주었지만, Card 위젯을 주었을 때는 별도의 padding속성이 아닌 &lt;strong&gt;Padding 클래스&lt;/strong&gt;를 사용해서 내부 위젯을 Padding위젯으로 감싸주고, 그 안에 padding 속성을 주었다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Flutter에서는 각 위젯의 구성과 전체적인 구성도에 익숙해져야 하므로, widget tree를 작성해보았다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-23/2020-04-23 flutter widget tree.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;700&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 위젯 이외에 요소간에 경계선을 주기 위해 SizedBox 위젯 안에 Divider 위젯을 넣어 경계선을 표현해주었다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;Row Widget&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Container(
  padding: EdgeInsets.all(10.0),
  color: Colors.white,
  margin: EdgeInsets.symmetric(vertical: 10.0, horizontal: 25.0),
  child: Row(
    children: &amp;lt;Widget&amp;gt;[
      Icon(
          Icons.phone,
          color: Colors.teal,
      ),
      SizedBox(
        width: 10.0,
      ),
      Text(
        '+81 80 4443 5931',
        style: TextStyle(
          color:Colors.teal.shade900,
          fontFamily: 'Source Sans Pro',
          fontSize: 20.0,
        ),
      ),
    ],
  )
),   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;ListTile Widget&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Card(
  color: Colors.white,
  margin: EdgeInsets.symmetric(vertical: 10.0, horizontal: 25.0),
  child: Padding(
    padding: EdgeInsets.all(1.0),
    child: ListTile(
        leading: Icon(
          Icons.phone,
          color: Colors.teal,
        ),
        title: Text(
        '+81 80 4443 5931',
        style: TextStyle(
          color:Colors.teal.shade900,
          fontFamily: 'Source Sans Pro',
          fontSize: 17.0,
        ),
       ),
     ),
   ),
 ),                
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 22 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/22/(15)Building-Apps-with-State/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/22/(15)Building-Apps-with-State/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(14)Card and ListTile Widget</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;※ 이번 포스팅에서는 기존에 작성했던 코드를 Customized Widgets을 활용하여 간단하게 refactoring해볼것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사용할 Customized widget은 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Card widget&quot;과 &quot;ListTile&quot; Widget&lt;/font&gt;&lt;/strong&gt;이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일전에 MiCard App을 만들었을때, 전화와 이메일 정보를 담는 네모난 카드형태의 모양을 Container 위젯을 사용해서 구현해보았다. 하지만 앞에 아이콘이 위치하고 뒤에 그 아이콘의 타이틀이 위치하는 형태는 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;이미 Card 위젯으로 Customize되어있다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
자 그럼 두 가지 소스코드를 비교해보자.&lt;/p&gt;

&lt;p&gt;다음 코드에서 볼 수 있듯이 Customize된 Widget을 활용하면 더욱 간단하게 소스코드를 작성할 수 있다. &lt;br /&gt;
이전에 사용했던 &lt;strong&gt;CircleAvatar 위젯&lt;/strong&gt;도 Customize Widget 중에 하나이다. 다음 소스 코드에서 Container 위젯을 Card위젯으로 바꾸었을때 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;가장 큰 변화는 padding 속성을 주는 부분&lt;/font&gt;&lt;/strong&gt;이다.&lt;br /&gt;
기존의 Container에서 padding을 주었을때에는 간단히 padding속성에 EdgeInsets.all(10.0) 속성을 주어 padding을 주었지만, Card 위젯을 주었을 때는 별도의 padding속성이 아닌 &lt;strong&gt;Padding 클래스&lt;/strong&gt;를 사용해서 내부 위젯을 Padding위젯으로 감싸주고, 그 안에 padding 속성을 주었다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Flutter에서는 각 위젯의 구성과 전체적인 구성도에 익숙해져야 하므로, widget tree를 작성해보았다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-23/2020-04-23 flutter widget tree.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;700&quot; /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 위젯 이외에 요소간에 경계선을 주기 위해 SizedBox 위젯 안에 Divider 위젯을 넣어 경계선을 표현해주었다.&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;
      Row Widget
    &lt;/th&gt;
    &lt;th&gt;
      ListTile Widget
    &lt;/th&gt;
  &lt;/tr&gt;

  &lt;tr&gt;

    &lt;td&gt;
    &lt;pre&gt;
    Container(
      padding: EdgeInsets.all(10.0),
      color: Colors.white,
      margin: EdgeInsets.symmetric(vertical: 10.0, horizontal: 25.0),
      child: &lt;b&gt;Row&lt;/b&gt;(
        children: &lt;Widget&gt;[
          Icon(
              Icons.phone,
              color: Colors.teal,
          ),
          SizedBox(
            width: 10.0,
          ),
          Text(
            '+81 80 4443 5931',
            style: TextStyle(
              color:Colors.teal.shade900,
              fontFamily: 'Source Sans Pro',
              fontSize: 20.0,
            ),
          ),
        ],
      )
    ),
  }

    &lt;td&gt;
      &lt;pre&gt;
  &lt;b&gt;Card&lt;/b&gt;(
    color: Colors.white,
    margin: EdgeInsets.symmetric(vertical: 10.0, horizontal: 25.0),
    child: Padding(
      padding: EdgeInsets.all(1.0),
      child: &lt;b&gt;ListTile&lt;/b&gt;(
          leading: Icon(
            Icons.phone,
            color: Colors.teal,
           ),
           title: Text(
            '+81 80 4443 5931',
            style: TextStyle(
              color:Colors.teal.shade900,
              fontFamily: 'Source Sans Pro',
              fontSize: 17.0,
            ),
           ),
         ),
       ),
     ),                
      &lt;/pre&gt;
    &lt;/td&gt;
&lt;/Widget&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
</description>
        <pubDate>Wed, 22 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/22/(14)Card-and-ListTile-Widget/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/22/(14)Card-and-ListTile-Widget/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(13) Flutter MiCard App</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;※ 이번 포스팅에서는 간단한 Flutter 앱을 만들어가면서 개발시에 필요한 각종 팁에 대해서 배우고, 중요한 내용들을 정리해 볼 것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 이번에 만든 최종 앱의 모습은 다음과 같다.&lt;br /&gt;
간단하게 Flutter로 레이아웃을 만들어 보았다. 단순한 앱이지만 레이아웃을 작성해나가면서 각 Widget을 어떻게 구성해야되는지, 여러 개념에 대해서 배울 수 있었다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;빨간색으로 작성한 속성은 나중에 유용하게 사용될 수 있다고 생각이 되서, Syntax에 익숙해지기 위해서 적어두었다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;※ Quick dogs의 사용 : &lt;font color=&quot;Red&quot;&gt;Mac에서는 Ctrl + j 단축키를&lt;/font&gt;누르면 각 위젯에서 설정할 수 있는 속성리스트를 확인할 수 있다.&lt;/strong&gt; &lt;br /&gt;
&lt;strong&gt;Material Design에서의 Pallet와 Icons의 사용에 대해서 익숙해지자. Google에서 제공되는 유용한 디자인 도구이므로, 잘 활용할 수 있도록 연습을 하자.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://material.io/&quot;&gt;https://material.io/&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이번 Flutter 앱을 만들어보면서 Container에 padding과 margin속성을 주는 작업을 하였는데, &lt;font color=&quot;Red&quot;&gt;EdgeInsets.all, EdgeInsets.symmetric 등 EdgeInsets를 이용해서 padding과  margin값을 지정할 수 있다는 것을 배웠다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;img src=&quot;/images/flutter/2020-04-23/2020-04-23 flutter micard app capture.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;300&quot; /&gt; &lt;br /&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;img src=&quot;/images/flutter/2020-04-23/2020-04-23 micard widget tree diagram.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;1000&quot; /&gt; &lt;br /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        backgroundColor: Colors.teal,
        body: SafeArea(
          child: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: &amp;lt;Widget&amp;gt;[
                CircleAvatar(
                  radius: 50.0,
                  backgroundColor: Colors.red,
                  backgroundImage: AssetImage('images/profile picture.jpg'),
                ),
                Text(
                  'Lee Hyungi',
                  style: TextStyle(
                    fontFamily: 'Pacifico',
                    fontSize: 40.0,
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  'Flutter Developer',
                  style: TextStyle(
                    fontFamily: 'Source Sans Pro',
                    color: Colors.teal.shade100,
                    fontSize: 20.0,
                    letterSpacing: 2.5,
                    fontWeight: FontWeight.bold
                  ),
                ),
                Container(
                  padding: EdgeInsets.all(10.0),
                  color: Colors.white,
                  margin: EdgeInsets.symmetric(vertical: 10.0, horizontal: 25.0),
                  child: Row(
                    children: &amp;lt;Widget&amp;gt;[
                      Icon(
                          Icons.phone,
                          color: Colors.teal,
                      ),
                      SizedBox(
                        width: 10.0,
                      ),
                      Text(
                        '+81 80 4443 5931',
                        style: TextStyle(
                          color:Colors.teal.shade900,
                          fontFamily: 'Source Sans Pro',
                          fontSize: 20.0,
                        ),
                      ),
                    ],
                  )
                ),
                Container(
                  padding: EdgeInsets.all(10.0),
                  margin: EdgeInsets.symmetric(vertical: 10.0, horizontal: 25.0),
                  color: Colors.white,
                  child: Row(
                    children: &amp;lt;Widget&amp;gt;[
                      Icon(
                        Icons.email,
                        color: Colors.teal,
                      ),
                      SizedBox(
                        width: 10.0,
                      ),
                      Text(
                        'mike.hyungi.lee@gmail.com',
                        style: TextStyle(
                          color: Colors.teal.shade900,
                          fontSize: 20.0,
                          fontFamily: 'Source Sans Pro',
                        ),
                      )
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 22 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/22/(13)Flutter-Simple-App/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/22/(13)Flutter-Simple-App/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(9) How to build beautiful UIs with Flutter Widgets</title>
        <description>&lt;h3 id=&quot;flutter의-widgets을-활용해서-ui를-작성해보자&quot;&gt;Flutter의 Widgets을 활용해서 UI를 작성해보자.&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;MiCard (간단히 나의 소개를 하는 앱 프로젝트)를 만들어보면서 Flutter 앱 개발에 필요한 요소들을 공부해 나갈 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이건 팁인데 GitHub 검색창에 Flutter를 검색해서 다른 사람의 소스코드들을 볼 수 있으니, 시간이 될때 다른 사람의 소스코드를 많이 보도록 하자.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;본격적으로 프로젝트를 시작하기 전에 &lt;font color=&quot;Red&quot;&gt;Hot Reload and Hot Restart&lt;/font&gt;에 대해서 배워 볼 것이다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;Flutter의 Hot reload기능을 사용하기 위해서는 Stateless Stateful Widgets에 대한 이해가 필요하다.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래는 StatelessWidget의 사용의 예이다. &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;stless를 작성하면 Stateless class가 자동완성된다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter stateless widget.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 기능을 이용하면 Flutter는 즉시 코드상의 변화를 Emulator에 반영한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이 Hot Reload 기능을 사용하기 위해서는 우리는 &lt;font color=&quot;Red&quot;&gt;&quot;StatelessWidget&quot;&lt;/font&gt;을 상속받는 클래스를 작성해서 이를 main() function에 넣어주어야 한다.&lt;/strong&gt;&lt;br /&gt;
Stateless Widget 클래스를 상속하면 build method를 내부에 구현하게 되는데, 이 메소드는 앱의 코드 속성이 바뀔때마다 자동으로 화면을 갱신시켜준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 hot reload.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;마치 화면에 바로 붓으로 페인팅을 해주는 듯이 앱을 만들어준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;우리는 개발을 할때 코드를 치고(Write code) &amp;lt;—&amp;gt; 코드를 테스트하는(Test code) 반복하는 작업을 한다. Flutter는 이 cycle의 시간을 단축시켜준다. &lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우리가 native Android/iOS 앱을 개발을 할때 Cold한 상태로 앱을 실행한다. Emulator를 실행하는데 시간이 오래걸린다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flutter에서의 또 다른 장점 중에 하나는 &lt;font color=&quot;Blue&quot;&gt;현재 화면중에 표시되어있는 데이터가 있다면, 이 데이터의 상태는 유지한 상태에서 디자인의 변경만 화면에 적용&lt;/font&gt;시킬 수 있다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;만약에 화면에 있는 데이터를 초기화 시킴과 동시에 화면의 디자인을 변경하고 싶다면, &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Hot reload(번개표시)&quot;옆에 있는 Hot restart(초록색 원형 화살표 표시)를 클릭하면 된다. Hot restart로 emulator를 다시 시작하는 것보다 훨씬 빠른 속도로 화면에 반영되는 것을 확인할 수 있다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter hot restart.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하나의 재미있는 컨셉으로 이 개념을 이해해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter example.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위에 케리어 백이 하나 있다. 여행을 갈때 매일과 같이 싸야되는 물건과 목적지에 따라서 추가적으로 챙겨야 되는 물건이 있다고 가정하자. 이런 경우에는 공통적으로 싸야되는 물건은 고정적으로 준비를 해두고 추가적으로 준비해야되는 물건은 따로 준비해서 챙기면 매우 편리하게 짐을 준비할 수 있다. 이를 Flutter의 개념에 비추어 이해해보면, 이미 적재되어 있는 코드는 계속 현상유지를 하고 추가된 새로운 요소만 기존의 요소에 업데이트 해주는 처리만 해주면 매우 편리하고 빠르게 코드처리를 처리할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사이즈는 전혀 문제가 되지 않는다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이번 시간에는 &lt;font color=&quot;Blue&quot;&gt;Container() Widget&lt;/font&gt;에 대해서 배워볼 것이다. 이 Container() Widget은 웹의 Div태그와 같은 기능을 해준다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter container widget.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter div tag.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;새로운 위젯을 사용해서 개발을 할때는 항상 Flutter 공식 홈페이지의 API문서를 참조해서 만들어야 한다.&lt;br /&gt;
&lt;strong&gt;이번에 배울 Container위젯은 Layout과 관련된 항목이므로, 아래 Flutter widget categories페이지에서 layout 항목을 선택한다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt; Flutter widget categories
&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
→ &lt;a href=&quot;https://flutter.dev/docs/development/ui/widgets&quot;&gt;https://flutter.dev/docs/development/ui/widgets&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt; Flutter container widget
&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
→ &lt;a href=&quot;https://api.flutter.dev/flutter/widgets/Container-class.html&quot;&gt;https://api.flutter.dev/flutter/widgets/Container-class.html&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;API의 설명을 보면 &lt;strong&gt;“Containers with no children try to be as big as possible”&lt;/strong&gt;내용을 확인할 수 있다. &lt;br /&gt;
여기에서 알 수 있듯이 Container widget에 자식 widget/container가 없다면, 컨테이너의 크기는 가능한한 커지려고 하는 속성을 가지고 있는 것을 알 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 속성을 확인하기 위해서 Scaffold 위젯에 배경색을 넣고, body에 Container 위젯을 넣어 색상 속성을 지정해주자. 그러면 body에 넣은 Container색상으로 배경색이 모두 바뀌는 것을 알 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;만약에 Container 내부에 child:Text(‘chlie’)를 넣어주면 그 작은 텍스트만 감싸는 Container를 확인할 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;만약에 Container를 Parent와 맞춰서 늘리고 싶다면, double.infinity 값을 height와 width의 속성에 넣어주면 된다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;Container의 배경색을 바꾸기 위해서는 &lt;font color=&quot;Red&quot;&gt;decoration&lt;/font&gt;과 &lt;font color=&quot;Red&quot;&gt;foregroundDecoration&lt;/font&gt;을 사용해서 바꿀 수 있다. &lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 두 가지 속성을 바꿔서 Container의 모양을 완전히 바꿀 수 있다. 두 속성의 간단한 차이점을 말하자면, &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Decoration&quot;&lt;/font&gt;속성은 항상 child의 뒤(Behind)에 위치한고 반면에 &lt;font color=&quot;Red&quot;&gt;foregroundDecoration&lt;/font&gt;은 child의 위(Top)에 위치한다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;Container내의 배경색상 바꾸기&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Way1 : use color with Color class &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;child: Container(
  //Set background for container.
  color: Colors.redAccent
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Way2 : use decoration with BoxDecoration&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return new Container(
  // This widget is the root of the application.
  decoration: new BoxDecoration(color: Colors.red),
  child: new Center(
    child: new Text(&quot;Hello, World!&quot;),
  ),
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Way3 : use foregroundDecoration with BoxDecoration&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return Scaffold(
    appBar: AppBar(title: Text('Container.foregroundDecoration')),
    body: Container(
      height: double.infinity,
      width: double.infinity,
      decoration: BoxDecoration(color: Colors.yellowAccent),
      foregroundDecoration: BoxDecoration(
        color: Colors.red.withOpacity(0.5),
      ),
      child: Text(&quot;Hi&quot;),
   ),
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 Text child를 가지고 있는 container의 위치를 확인해보면 최상단에 글자가 잘린 상태로 출력됨을 알 수 있다. 이로 인해 &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;&quot;Safe Area&quot;&lt;/font&gt;&lt;/strong&gt;를 설정해주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Container 위젯에서 Alt+Enter키를 누르고 “wrap with widget”을 선택하면 Container 위젯을 감싸는 widget을 지정할 수 있다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 SafeArea widget.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Container 속성 (1)
height: 100.0,
width: 100.0,
margin: EdgeInsets.all(20.0),

//Container 속성 (2)
height: 100.0,
width: 100.0,
margin: EdgeInsets.symmetric(vertical: 50, horizontal: 100),

//Container 속성 (3)
height: 100.0,
width: 100.0,
margin: EdgeInsets.fromLTRB(30.0, 10.0, 50.0, 20.0),

//Container 속성 (4)
height: 100.0,
width: 100.0,
margin: EdgeInsets.only(left: 30.0),

//margin은 outside of widget의 간격을 조절할때 사용하고,
//padding은 inside of widget의 간격을 조절할때 사용된다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Flutter Inspector의 Debug Paint버튼을 이용하여 Container 위젯이 화면에서 어떻게 구성이 되어있는지 가시적으로 확인할 수 있다.&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter debug paint.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; width=&quot;400&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;※ 만약에 Text 위젯 이외에 하나의 위젯을 더 넣으려고 한다면, 에러가 난다. 그 이유는 Container는 “Single-child layout widgets” 중에 하나이기 때문이다. &lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(9)How-to-build-beautiful-UIs-with-Flutter-Widgets/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(9)How-to-build-beautiful-UIs-with-Flutter-Widgets/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(8) Hot reload! Stateless Stateful Widgets</title>
        <description>&lt;h3 id=&quot;flutter의-hot-reload-기능&quot;&gt;Flutter의 Hot reload 기능&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;Flutter의 Hot reload기능을 사용하기 위해서는 Stateless Stateful Widgets에 대한 이해가 필요하다.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래는 StatelessWidget의 사용의 예이다. &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;stless를 작성하면 Stateless class가 자동완성된다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter stateless widget.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(8)Hot-reload-Stateless-Stateful-widgets/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(8)Hot-reload-Stateless-Stateful-widgets/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(7) Image resources download tip</title>
        <description>&lt;h3 id=&quot;이미지-리소스를-무료로-다운받아서-사용할-수-있는-사이트&quot;&gt;이미지 리소스를 무료로 다운받아서 사용할 수 있는 사이트&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;개인적으로 앱을 만들면서 느낀 것이 앱에 알맞는 이미지 리소스를 넣는 것은 실제 앱의 사용자로 하여금 좀 더 편리하고 효율적으로 앱을 사용하게 해준다고 느꼈다.따라서 아래의 이미지 리소스를 무료로 받아서 사용할 수 있는 사이트를 적극 활용하자.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;① 이미지 리소스를 무료로 받아서 사용할 수 있는 사이트&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;icon8.com/ouch&quot;&gt;icon8.com/ouch&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;vecteezy.com&quot;&gt;vecteezy.com&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;② Customize the background or icon image&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;www.canva.com&quot;&gt;www.canva.com&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(7)Image-resource-download/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(7)Image-resource-download/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>(6) Running your app on a physical device</title>
        <description>&lt;h3 id=&quot;deploying-your-flutter-apps-to-a-physical-device-&quot;&gt;Deploying Your Flutter Apps to a Physical Device &lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;실제 안드로이드 단말기에서 Flutter App을 deploy하는 방법을 살펴보자.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;우선 아래의 순서대로 실제 안드로이드 단말기에서 설정해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(1) [About] - Software Information - Build number (need to tap the menu until being developer mode.)&lt;br /&gt;
(2) Enable USB Debugging&lt;br /&gt;
(3) Connect Your Phone with USB&lt;br /&gt;
(4) Set “Trust Connected PC”&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;※ TroubleShooting Reference&lt;br /&gt;
&lt;a href=&quot;https://blog.londonappbrewery.com/troubleshooting-android-device-testing-on-windows-a2b5d779df08&quot;&gt;https://blog.londonappbrewery.com/troubleshooting-android-device-testing-on-windows-a2b5d779df08&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Blue&quot;&gt;실제 iOS 단말기에서 Flutter App을 deploy하는 방법을 살펴보자.&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;아래의 Requirements를 우선준비한다.&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Requirements&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;① An Apple ID 준비하기&lt;br /&gt;
② An iPhone/iPad Device &lt;br /&gt;
③ Xcode 설치 &lt;br /&gt;
④ USB Cable &lt;br /&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;&lt;font color=&quot;Green&quot;&gt;iOS 실 단말기에 Flutter app을 deploy하기 위한 5 Steps&lt;/font&gt;&lt;/strong&gt; &lt;br /&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;① &lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;iOS버전이 Xcode 버전과 호환이 되는지 확인하기&lt;/font&gt;&lt;br /&gt;
iOS의 소프트웨어 버전 = 12.3이라고 가정하면, 우선 소수점 앞자리 12에서 2를 빼서(12-2) 10이라는 숫자가 된다.&lt;br /&gt;
실제 내 단말기를 확인하면, 13.3.1 버전이고 소수점 맨 앞자리 13에서 2를 빼면(13-2) 11이라는 숫자가 된다. &lt;br /&gt;
위에서 계산된 숫자는 Xcode의 최소로 요구되는 버전가 된다.&lt;strong&gt;Xcode는 최소 버전 11이어야 하고, 동시에 두번째 숫자는 Xcode버전의 두번째 숫자보다 작거나 같아야 한다.&lt;/strong&gt;&lt;br /&gt;&lt;font color=&quot;Red&quot;&gt;내가 설치한 Xcode버전은 11.3.1 / iOS버전은 13.3.1이므로 위의 두 조건을 모두 만족한다.&lt;/font&gt;&lt;br /&gt;만약에 버전이 일치하지 않는다면, Xcode의 버전을 업그레이드 하는 것이 최선이다. &lt;br /&gt;
MacOS 버전이 업데이트 되었다면, Xcode 버전도 함께 업데이트하자.&lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;② homebrew를 설치한다. &lt;br /&gt;
&lt;a href=&quot;https://brew.sh/index_ja&quot;&gt;https://brew.sh/index_ja&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;/usr/bin/ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;Use home-brew to install ideviceInstaller, iOS-deploy &amp;amp; cocoa pods&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
아래 링크의 “Deploy to iOS devices”를 참조해서 설치하기&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;③ Xcode에서 “Apple ID”를 등록하기&lt;br /&gt;
&lt;strong&gt;(1) 프로젝트에서 iOS module in Xcode를 이용해서 Xcode열기&lt;/strong&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter xcode open.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;(2) Xcode에서 [Runner] - [Targets App을 선택] - [Signing &amp;amp; Capabilities 탭을 선택] - All - [Add Account]
내 Apple ID로 로그인한 뒤에 Develop Team 선택하기.&lt;/strong&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter apple id register.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/flutter/2020-04-21/2020-04-21 flutter regeister apple id.png&quot; alt=&quot;blog capture&quot; title=&quot;capture img&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;④ 실제 iOS단말기를 USB로 연결하고, “Trust connected Computer” 선택하기&lt;br /&gt;
&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt;만약에 앱이 단말기에 기동되지 않는다면, 신뢰된 App으로 인식이 안되서 앱이 기동이 되지 않는 것이다.&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
[General] - Device Management - Click the App  - check - Trust Profile and device management - developer app 아래에 어플 설정 들어가서 Trust클릭! - Create Unique bundle ID&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;⑤ 최종적으로 Android studio에서 Flutter를 진단해본다.&lt;br /&gt;
Android studio - [final check] - Flutter doctor&lt;strong&gt;&lt;font color=&quot;Red&quot;&gt; (Check the setup process)&lt;/font&gt;&lt;/strong&gt;&lt;br /&gt;
※ iOS에 앱을 기동시켰을때 에러가 나는 경우, 아래 troubleshooting페이지를 확인하자.&lt;br /&gt;
&lt;a href=&quot;https://blog.londonappbrewery.com/troubleshooting-ios-device-testing-for-flutter-38c5da239e62&quot;&gt;https://blog.londonappbrewery.com/troubleshooting-ios-device-testing-for-flutter-38c5da239e62&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2020/04/21/(6)Running-your-app-on-a-physical-device/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/21/(6)Running-your-app-on-a-physical-device/</guid>
        
        
        <category>Flutter</category>
        
      </item>
    
  </channel>
</rss>
