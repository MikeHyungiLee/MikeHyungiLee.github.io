I"<blockquote>
  <p>MVVM way to structure code<br />
<strong>MVVM(Model View View-Model)</strong>은 내가 가장 선호하는 architectural design pattern이다.</p>
</blockquote>

<blockquote>
  <p><strong>Features of MVVM architectural design pattern</strong></p>
  <blockquote>
    <ol>
      <li>UI components are kept away from the business logic<br />
(화면의 각각 UI요소가 비즈니스 로직과 떨어져 있다.)</li>
      <li>Business logic is kept away from the database operations<br />
(비즈니스 로직이 데이터베이스를 관리하는 곳으로부터 떨어져있다.)</li>
      <li>Easy to understand and read<br />
(이해하기 쉽고 가독성이 높다.)</li>
      <li>A lot less to worry when it comes to managing life cycle events <br />
(라이프 사이클 이벤트 관리에 관한 한 크게 걱정할 필요가 없다.)</li>
    </ol>
  </blockquote>
</blockquote>

<blockquote>
  <p><strong>Benefits of using MVVM</strong></p>
  <blockquote>
    <ol>
      <li>Life cycle state of the app will be maintained<br />
(앱의 라이프 사이클 상태를 유지한다.)</li>
      <li>The app will be in the same position the same exact state as when the user left it<br />
(앱은 사용자가 앱으로 부터 나갔을때, 똑같은, 정확한 위치에 위치하게 된다.)</li>
    </ol>
  </blockquote>
</blockquote>

<p><strong>Architecture Diagram - outlining an ideal situation when using MVVM</strong></p>
<table>
  <tr>
    <td width="50%">
      <img src="/images/android/MVVM architecture diagram.png" alt="blog capture" title="capture img" />
    </td>  
    <td width="50%">  
      ① 우선적으로 살펴볼 부분은 Remote Data Source부분이다. 많은 app에서 rep(Rest API와 같은 통신API를 이용해서 원격지의 데이터를 취득한다)를 사용한다.
      <br />   
      ② 다음으로 살펴볼 부분은 Model부분으로, Room SQLite database를 가지고 있고, 이 부분이 데이터베이스의 Cache된 데이터를 가지게 된다.<br />

    </td>
  </tr>
</table>
:ET