I"a<p><strong>#7 Android MVVM Architecture Tutorial - Handling API Exceptions<br /></strong></p>

<p><strong>참고</strong>:<a href="https://www.youtube.com/watch?v=67bdklHmXA8&amp;list=PLk7v1Z2rk4hjVaZ8DZKe8iT9RIM9OUrwp&amp;index=1">https://www.youtube.com/watch?v=67bdklHmXA8&amp;list=PLk7v1Z2rk4hjVaZ8DZKe8iT9RIM9OUrwp&amp;index=1</a><br /></p>

<p>API 송수신 에러를 처리를 구현해 볼 것이다. <br /></p>

<p><strong>※ 노트정리 (Part7)</strong><br />
<img src="/images/android/2020-04-20/2020-04-20 Handling API Exceptions.png" alt="blog capture" width="700" title="capture img" /><br /></p>

<p>ViewModel클래스에서 호출해서 사용할 UserRepository의 메소드를 살펴보자. 이 메소드는 기존에 Response 객체를 반환하고, 이 반환된 객체를 ViewModel에서 일일이 송수신 성공여부(로그인 성공/실패)에 따라서 이벤트 처리를 해주었다. <br />
<strong><font color="Red">하지만 이런식으로 반복해서 ViewModel 클래스에서 매번 조건처리해서 적어주면 코드의 가독성이 떨어지기 때문에, 이러한 처리를 공통화 처리해주기로 한다.</font></strong><br /></p>

<p>위의 공통화 처리해서 작성해줄 부분이 network 패키지 아래에 작성한 SafeApiRequest 추상클래스이고, 여기에서 작성한 메소드는 송수신 성공시에는 ResponseBody를 반환해주고, 실패하면, 에러 메시지를 덫붙여서 ApiException 클래스에 던져준다. <br /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class ApiException(message: String) : IOException(message) {

}
</code></pre></div></div>

<p>위와 같이 IOException클래스를 상속하고, String타입의 message 변수를 인자로 갖는 ApiException클래스를 작성해서 활용한다. 이 ApiException 클래스는 IOException의 기능을 계승한다.<br /></p>

<p><strong>이렇게 작성을 하게 되면, 최종적으로 AuthViewModel 클래스에서 Repository클래스 내부에서 작성한 메소드로 값을 반환할때, <font color="Red">try{}catch{}내에서 커스터마이징한 ApiException클래스로 송수신 성공/실패를 에러로써 Catch해서 처리할 수 있게 된다.</font></strong><br /></p>

<p>이 부분은 연습이 필요할 것 같다.<br /></p>

<p><strong><font color="Green">(2020/04/24 업데이트 내용)</font></strong></p>

<p><strong>#8 Android MVVM Architecture Tutorial - User Login<br /></strong><br /></p>

<p>이제 Login한 User정보를 내부 DB(SQLite)에 저장을 할 것이다. <br /></p>

<p>LoginActivity &lt;———-&gt; DB(SQLite) <br /></p>

<p>이 처리과정 사이에는 LoginActivity —&gt; AuthViewModel —&gt; UserRepository —&gt; SQLite 순서로 값이 전달된다. 이런 형태로 데이터를 처리하면 나중에 Unit test를 할때 편할 것 같다.<br /></p>

<p>구체적인 내용은 아래에 직접 노트필기한 부분을 캡쳐해서 사진으로 첨부했다. 이것을 참조하면서 이번시간에 공부한 내용을 정리하도록 하자.<br />
<strong><font color="Red">집중해서 봐야할 내용은 Activity클래스에서 viewModel객체를 초기화 시킬때 Repository를 인수로 받아서 초기화 시켜주는 부분이다.</font><br />
 이 부분이 중요한 이유는 Activity클래스에서 db에 접근하기 위해서는 Repository 클래스를 갖고 있는 ViewModel객체가 필요한데, 우리가 기존에 작성한 ViewModel 객체를 보면 초기화 시켜주었을 당시에 ViewModelProviders를 사용해서 초기화를 시켜주었는데, 여기서 인자값으로 Context만 넘겨주었다. 따라서 ViewModelProviders의 다른 생성자를 확인해보면 Context와 ViewModelFactory 두 개의 인자로 객체화를 시켜주는 생성자도 있는데, 이를 위해 AuthViewModelFactory 클래스를 작성해서 함께 초기화 시켜주면 Repository정보도 갖고 있는 ViewModel 객체를 만들어서 접근할 수 있다.</strong><br /></p>

<p><strong>※ 노트정리 (Part8)</strong><br />
<img src="/images/android/2020-04-24/2020-04-24 kotlin save user info into sqlite.png" alt="blog capture" width="700" title="capture img" /><br /></p>

<p><strong>#9 Android MVVM Architecture Tutorial - Dependency Injection<br /></strong><br /></p>

<p>이제 인터넷 연결을 검사해서 인터넷이 연결되어 있지 않은 경우, 에러를 처리하도록 할 것이다.<br /></p>

<p><strong>※ 노트정리 (Part9)</strong><br />
<strong>내용 설명 : 이제 에러처리하는 것은 모두 IOException 클래스를 상속받고 message를 인자로 받는 Customized 클래스를 사용해서 에러가 발생하는 경우에는 Customized된 클래스로 에러를 throw하는 처리를 할 것이다.<br /></strong></p>

<p>우선 이번 시간에는 Network가 연결되었는지 아닌지를 검사해서 처리하는 NetworkConnectionInterceptor 클래스 내에서 작성을 하였다. 여기서 인터넷이 연결되어있는지 체크하는 method와 그 method를 사용해서 에러처리한 뒤 에러가 발생하는 조건의 경우 앞서 IOException을 상속한 NoInternetException 클래스에 에러를 throw하도록 처리를 하였다.</p>

<p>&lt;/strong&gt;</p>

<p><img src="/images/android/2020-04-24/2020-04-24 kotlin internet connection exception.png" alt="blog capture" width="700" title="capture img" /><br /></p>
:ET