I"L<h3 id="coroutine--"><strong>Coroutine ?</strong> <br /></h3>

<p>Work with Background thread <br />
Coroutine은 AsyncTask 와 같이 Threading하는 방법 중에 하나이다.<br /></p>

<p><strong>※ 아래와 같은 상황에서 Coroutine은 유용하게 쓰인다.</strong><br />
① Request to network retrofit volley 등의 통신 라이브러리를 사용할때, Main Thread가 Block된다.<br />
② Accessing the internal SQLite database on the phone. ex) Room database<br /></p>

<p><strong><font color="Red">위의 두가지 경우에서 일반적으로 background thread가 사용이 된다.</font></strong><br /></p>

<p>simulate network request and internal room database.<br /></p>

<p><strong><font color="Blue">Sequence</font></strong><br />
(1) Get the result value from background thread.<br />
(2) Take the result and then display on the main thread.<br /></p>

<p>Android 개발을 하다보면 Network나 내부 데이터베이스로부터 데이터를 취득해서 순차적으로 취득한 데이터를 처리해야 되는 경우가 있다. <br />
이런 경우는 이미 경험을 해봤었기 때문에 얼마나 큰 문제인지 알고 있다. 이 문제를 해결하기 위해서는 RxJava나 callback함수를 사용해서 작성을 하면, 코드가 매우 복잡해지기 때문에, Coroutine을 사용해서 작성을 하면 Simple하게 코드를 작성할 수 있다. <br /></p>

<p>① Gradle에 Coroutine과 관련된 dependencies를 추가한다.<br /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def coroutines_version = "1.2.1"
implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
</code></pre></div></div>

<p>② debug용으로 log를 확인하기 위해 “logThread” 메소드를 작성한다.<br /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>private fun logThread(methodName: String){
    println("debug: ${methodName}: ${Thread.currentThread().name}")
}
</code></pre></div></div>

<p>③ 테스트용으로 Api로부터 결과값을 가져오는 메소드(suspend)를 두개 작성한다. 이는 순차적으로 취득하는 데이터를 최종적으로 Main thread의 UI요소에 반영하기 위함이다.<br />
    private suspend fun getResult1FromApi():String{
        logThread(“getResult1FromApi”)
        delay(1000) // sleep single coroutine
        //Thread.sleep(1000) // sleep all coroutine
        return RESULT_1 // “Result #1”
    }</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>private suspend fun getResult2FromApi(): String{
    logThread("getResult2FromApi")
    delay(1000)
    return RESULT_2 // "Result #2"
}
</code></pre></div></div>

<p>④ 위에서 작성한 Api취득 메소드를 fakeApiResult() 메소드(suspend) 내에서 처리하도록 작성한다. <br />
   여기서 테스트해볼 것은 api로부터 취득한 값을 UI상에 표시하는 테스트를 해볼 것이다. 하지만 <strong>현재 fakeApiResult()메소드가 실행되는 thread는 Main thread가 아닌 Background thread</strong>이므로, <strong><font color="Red">UI에서 처리하기 위해서는 취득한 값을 "Main thread"로 보내서 UI에 표시처리해야 한다.</font></strong><br />
⑤</p>

<p>참고 : <a href="https://codelabs.developers.google.com/codelabs/kotlin-coroutines/#0">Android coroutines codelab</a></p>

<h3 id="전체적인-학습내용을-복습한다">전체적인 학습내용을 복습한다.<br /></h3>
<p>1.</p>
:ET